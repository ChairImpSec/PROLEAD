<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1510" onload="init(evt)" viewBox="0 0 1200 1510" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1510" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1493.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1493.00"> </text><svg id="frames" x="10" width="1180" total_samples="2640"><g><title>Fault::GetFaultProbability (3 samples, 0.11%)</title><rect x="0.0000%" y="1429" width="0.1136%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1439.50"></text></g><g><title>Fault::GetNotFaultProbability (3 samples, 0.11%)</title><rect x="0.1136%" y="1429" width="0.1136%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="3"/><text x="0.3636%" y="1439.50"></text></g><g><title>double boost::random::detail::real_alias_table&lt;int, double&gt;::init_average&lt;double const*&gt; (8 samples, 0.30%)</title><rect x="0.2273%" y="1365" width="0.3030%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="8"/><text x="0.4773%" y="1375.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::resize (8 samples, 0.30%)</title><rect x="0.2273%" y="1349" width="0.3030%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="8"/><text x="0.4773%" y="1359.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_default_append (8 samples, 0.30%)</title><rect x="0.2273%" y="1333" width="0.3030%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="8"/><text x="0.4773%" y="1343.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::reserve (19 samples, 0.72%)</title><rect x="0.5303%" y="1365" width="0.7197%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="19"/><text x="0.7803%" y="1375.50"></text></g><g><title>boost::random::discrete_distribution&lt;int, double&gt;::discrete_distribution&lt;double [2]&gt; (41 samples, 1.55%)</title><rect x="0.2273%" y="1413" width="1.5530%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="41"/><text x="0.4773%" y="1423.50"></text></g><g><title>void boost::random::discrete_distribution&lt;int, double&gt;::init&lt;double const*&gt; (41 samples, 1.55%)</title><rect x="0.2273%" y="1397" width="1.5530%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="41"/><text x="0.4773%" y="1407.50"></text></g><g><title>void boost::random::discrete_distribution&lt;int, double&gt;::init&lt;double const*&gt; (41 samples, 1.55%)</title><rect x="0.2273%" y="1381" width="1.5530%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="41"/><text x="0.4773%" y="1391.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::~vector (14 samples, 0.53%)</title><rect x="1.2500%" y="1365" width="0.5303%" height="15" fill="rgb(220,122,19)" fg:x="33" fg:w="14"/><text x="1.5000%" y="1375.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::~_Vector_base (14 samples, 0.53%)</title><rect x="1.2500%" y="1349" width="0.5303%" height="15" fill="rgb(250,228,42)" fg:x="33" fg:w="14"/><text x="1.5000%" y="1359.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_deallocate (14 samples, 0.53%)</title><rect x="1.2500%" y="1333" width="0.5303%" height="15" fill="rgb(240,193,28)" fg:x="33" fg:w="14"/><text x="1.5000%" y="1343.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::deallocate (14 samples, 0.53%)</title><rect x="1.2500%" y="1317" width="0.5303%" height="15" fill="rgb(216,20,37)" fg:x="33" fg:w="14"/><text x="1.5000%" y="1327.50"></text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::deallocate (14 samples, 0.53%)</title><rect x="1.2500%" y="1301" width="0.5303%" height="15" fill="rgb(206,188,39)" fg:x="33" fg:w="14"/><text x="1.5000%" y="1311.50"></text></g><g><title>cfree@GLIBC_2.2.5 (14 samples, 0.53%)</title><rect x="1.2500%" y="1285" width="0.5303%" height="15" fill="rgb(217,207,13)" fg:x="33" fg:w="14"/><text x="1.5000%" y="1295.50"></text></g><g><title>FaultManager::SampleRandomFault (47 samples, 1.78%)</title><rect x="0.2273%" y="1429" width="1.7803%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="47"/><text x="0.4773%" y="1439.50">F..</text></g><g><title>boost::random::discrete_distribution&lt;int, double&gt;::~discrete_distribution (6 samples, 0.23%)</title><rect x="1.7803%" y="1413" width="0.2273%" height="15" fill="rgb(225,20,46)" fg:x="47" fg:w="6"/><text x="2.0303%" y="1423.50"></text></g><g><title>boost::random::detail::real_alias_table&lt;int, double&gt;::~real_alias_table (6 samples, 0.23%)</title><rect x="1.7803%" y="1397" width="0.2273%" height="15" fill="rgb(210,31,41)" fg:x="47" fg:w="6"/><text x="2.0303%" y="1407.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::~vector (6 samples, 0.23%)</title><rect x="1.7803%" y="1381" width="0.2273%" height="15" fill="rgb(221,200,47)" fg:x="47" fg:w="6"/><text x="2.0303%" y="1391.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::~_Vector_base (6 samples, 0.23%)</title><rect x="1.7803%" y="1365" width="0.2273%" height="15" fill="rgb(226,26,5)" fg:x="47" fg:w="6"/><text x="2.0303%" y="1375.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_deallocate (6 samples, 0.23%)</title><rect x="1.7803%" y="1349" width="0.2273%" height="15" fill="rgb(249,33,26)" fg:x="47" fg:w="6"/><text x="2.0303%" y="1359.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::deallocate (6 samples, 0.23%)</title><rect x="1.7803%" y="1333" width="0.2273%" height="15" fill="rgb(235,183,28)" fg:x="47" fg:w="6"/><text x="2.0303%" y="1343.50"></text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::deallocate (6 samples, 0.23%)</title><rect x="1.7803%" y="1317" width="0.2273%" height="15" fill="rgb(221,5,38)" fg:x="47" fg:w="6"/><text x="2.0303%" y="1327.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.23%)</title><rect x="1.7803%" y="1301" width="0.2273%" height="15" fill="rgb(247,18,42)" fg:x="47" fg:w="6"/><text x="2.0303%" y="1311.50"></text></g><g><title>_int_free (6 samples, 0.23%)</title><rect x="2.0076%" y="1413" width="0.2273%" height="15" fill="rgb(241,131,45)" fg:x="53" fg:w="6"/><text x="2.2576%" y="1423.50"></text></g><g><title>[[heap]] (12 samples, 0.45%)</title><rect x="2.0076%" y="1429" width="0.4545%" height="15" fill="rgb(249,31,29)" fg:x="53" fg:w="12"/><text x="2.2576%" y="1439.50"></text></g><g><title>operator new (6 samples, 0.23%)</title><rect x="2.2348%" y="1413" width="0.2273%" height="15" fill="rgb(225,111,53)" fg:x="59" fg:w="6"/><text x="2.4848%" y="1423.50"></text></g><g><title>_int_free (6 samples, 0.23%)</title><rect x="2.4621%" y="1413" width="0.2273%" height="15" fill="rgb(238,160,17)" fg:x="65" fg:w="6"/><text x="2.7121%" y="1423.50"></text></g><g><title>cfree@GLIBC_2.2.5 (10 samples, 0.38%)</title><rect x="2.6894%" y="1413" width="0.3788%" height="15" fill="rgb(214,148,48)" fg:x="71" fg:w="10"/><text x="2.9394%" y="1423.50"></text></g><g><title>malloc (5 samples, 0.19%)</title><rect x="3.0682%" y="1413" width="0.1894%" height="15" fill="rgb(232,36,49)" fg:x="81" fg:w="5"/><text x="3.3182%" y="1423.50"></text></g><g><title>operator new (3 samples, 0.11%)</title><rect x="3.2576%" y="1413" width="0.1136%" height="15" fill="rgb(209,103,24)" fg:x="86" fg:w="3"/><text x="3.5076%" y="1423.50"></text></g><g><title>[[stack]] (25 samples, 0.95%)</title><rect x="2.4621%" y="1429" width="0.9470%" height="15" fill="rgb(229,88,8)" fg:x="65" fg:w="25"/><text x="2.7121%" y="1439.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::reserve (1 samples, 0.04%)</title><rect x="3.3712%" y="1413" width="0.0379%" height="15" fill="rgb(213,181,19)" fg:x="89" fg:w="1"/><text x="3.6212%" y="1423.50"></text></g><g><title>_int_free (20 samples, 0.76%)</title><rect x="3.4091%" y="1413" width="0.7576%" height="15" fill="rgb(254,191,54)" fg:x="90" fg:w="20"/><text x="3.6591%" y="1423.50"></text></g><g><title>cfree@GLIBC_2.2.5 (50 samples, 1.89%)</title><rect x="4.1667%" y="1413" width="1.8939%" height="15" fill="rgb(241,83,37)" fg:x="110" fg:w="50"/><text x="4.4167%" y="1423.50">c..</text></g><g><title>malloc (30 samples, 1.14%)</title><rect x="6.0606%" y="1413" width="1.1364%" height="15" fill="rgb(233,36,39)" fg:x="160" fg:w="30"/><text x="6.3106%" y="1423.50"></text></g><g><title>operator new (5 samples, 0.19%)</title><rect x="7.1970%" y="1413" width="0.1894%" height="15" fill="rgb(226,3,54)" fg:x="190" fg:w="5"/><text x="7.4470%" y="1423.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_default_append (2 samples, 0.08%)</title><rect x="7.3864%" y="1413" width="0.0758%" height="15" fill="rgb(245,192,40)" fg:x="195" fg:w="2"/><text x="7.6364%" y="1423.50"></text></g><g><title>[anon] (108 samples, 4.09%)</title><rect x="3.4091%" y="1429" width="4.0909%" height="15" fill="rgb(238,167,29)" fg:x="90" fg:w="108"/><text x="3.6591%" y="1439.50">[ano..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::reserve (1 samples, 0.04%)</title><rect x="7.4621%" y="1413" width="0.0379%" height="15" fill="rgb(232,182,51)" fg:x="197" fg:w="1"/><text x="7.7121%" y="1423.50"></text></g><g><title>_int_free (37 samples, 1.40%)</title><rect x="8.1818%" y="1413" width="1.4015%" height="15" fill="rgb(231,60,39)" fg:x="216" fg:w="37"/><text x="8.4318%" y="1423.50"></text></g><g><title>cfree@GLIBC_2.2.5 (15 samples, 0.57%)</title><rect x="9.5833%" y="1413" width="0.5682%" height="15" fill="rgb(208,69,12)" fg:x="253" fg:w="15"/><text x="9.8333%" y="1423.50"></text></g><g><title>malloc (4 samples, 0.15%)</title><rect x="10.1515%" y="1413" width="0.1515%" height="15" fill="rgb(235,93,37)" fg:x="268" fg:w="4"/><text x="10.4015%" y="1423.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_default_append (2 samples, 0.08%)</title><rect x="10.3030%" y="1413" width="0.0758%" height="15" fill="rgb(213,116,39)" fg:x="272" fg:w="2"/><text x="10.5530%" y="1423.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_allocate (2 samples, 0.08%)</title><rect x="10.3030%" y="1397" width="0.0758%" height="15" fill="rgb(222,207,29)" fg:x="272" fg:w="2"/><text x="10.5530%" y="1407.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::allocate (2 samples, 0.08%)</title><rect x="10.3030%" y="1381" width="0.0758%" height="15" fill="rgb(206,96,30)" fg:x="272" fg:w="2"/><text x="10.5530%" y="1391.50"></text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::allocate (2 samples, 0.08%)</title><rect x="10.3030%" y="1365" width="0.0758%" height="15" fill="rgb(218,138,4)" fg:x="272" fg:w="2"/><text x="10.5530%" y="1375.50"></text></g><g><title>malloc (2 samples, 0.08%)</title><rect x="10.3030%" y="1349" width="0.0758%" height="15" fill="rgb(250,191,14)" fg:x="272" fg:w="2"/><text x="10.5530%" y="1359.50"></text></g><g><title>[unknown] (78 samples, 2.95%)</title><rect x="7.5000%" y="1429" width="2.9545%" height="15" fill="rgb(239,60,40)" fg:x="198" fg:w="78"/><text x="7.7500%" y="1439.50">[un..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::reserve (2 samples, 0.08%)</title><rect x="10.3788%" y="1413" width="0.0758%" height="15" fill="rgb(206,27,48)" fg:x="274" fg:w="2"/><text x="10.6288%" y="1423.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_allocate (2 samples, 0.08%)</title><rect x="10.3788%" y="1397" width="0.0758%" height="15" fill="rgb(225,35,8)" fg:x="274" fg:w="2"/><text x="10.6288%" y="1407.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::allocate (2 samples, 0.08%)</title><rect x="10.3788%" y="1381" width="0.0758%" height="15" fill="rgb(250,213,24)" fg:x="274" fg:w="2"/><text x="10.6288%" y="1391.50"></text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::allocate (2 samples, 0.08%)</title><rect x="10.3788%" y="1365" width="0.0758%" height="15" fill="rgb(247,123,22)" fg:x="274" fg:w="2"/><text x="10.6288%" y="1375.50"></text></g><g><title>malloc (2 samples, 0.08%)</title><rect x="10.3788%" y="1349" width="0.0758%" height="15" fill="rgb(231,138,38)" fg:x="274" fg:w="2"/><text x="10.6288%" y="1359.50"></text></g><g><title>Fault::GetFaultProbability (5 samples, 0.19%)</title><rect x="12.0455%" y="1333" width="0.1894%" height="15" fill="rgb(231,145,46)" fg:x="318" fg:w="5"/><text x="12.2955%" y="1343.50"></text></g><g><title>Fault::GetNotFaultProbability (17 samples, 0.64%)</title><rect x="12.2348%" y="1333" width="0.6439%" height="15" fill="rgb(251,118,11)" fg:x="323" fg:w="17"/><text x="12.4848%" y="1343.50"></text></g><g><title>FaultSet::FaultSet (5 samples, 0.19%)</title><rect x="12.8788%" y="1333" width="0.1894%" height="15" fill="rgb(217,147,25)" fg:x="340" fg:w="5"/><text x="13.1288%" y="1343.50"></text></g><g><title>std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::vector (5 samples, 0.19%)</title><rect x="12.8788%" y="1317" width="0.1894%" height="15" fill="rgb(247,81,37)" fg:x="340" fg:w="5"/><text x="13.1288%" y="1327.50"></text></g><g><title>Fault const** std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**, Fault const*&gt; (5 samples, 0.19%)</title><rect x="12.8788%" y="1301" width="0.1894%" height="15" fill="rgb(209,12,38)" fg:x="340" fg:w="5"/><text x="13.1288%" y="1311.50"></text></g><g><title>Fault const** std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (5 samples, 0.19%)</title><rect x="12.8788%" y="1285" width="0.1894%" height="15" fill="rgb(227,1,9)" fg:x="340" fg:w="5"/><text x="13.1288%" y="1295.50"></text></g><g><title>Fault const** std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (5 samples, 0.19%)</title><rect x="12.8788%" y="1269" width="0.1894%" height="15" fill="rgb(248,47,43)" fg:x="340" fg:w="5"/><text x="13.1288%" y="1279.50"></text></g><g><title>Fault const** std::copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (5 samples, 0.19%)</title><rect x="12.8788%" y="1253" width="0.1894%" height="15" fill="rgb(221,10,30)" fg:x="340" fg:w="5"/><text x="13.1288%" y="1263.50"></text></g><g><title>Fault const** std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (5 samples, 0.19%)</title><rect x="12.8788%" y="1237" width="0.1894%" height="15" fill="rgb(210,229,1)" fg:x="340" fg:w="5"/><text x="13.1288%" y="1247.50"></text></g><g><title>Fault const** std::__copy_move_a1&lt;false, Fault const* const*, Fault const**&gt; (5 samples, 0.19%)</title><rect x="12.8788%" y="1221" width="0.1894%" height="15" fill="rgb(222,148,37)" fg:x="340" fg:w="5"/><text x="13.1288%" y="1231.50"></text></g><g><title>Fault const** std::__copy_move_a2&lt;false, Fault const* const*, Fault const**&gt; (5 samples, 0.19%)</title><rect x="12.8788%" y="1205" width="0.1894%" height="15" fill="rgb(234,67,33)" fg:x="340" fg:w="5"/><text x="13.1288%" y="1215.50"></text></g><g><title>Fault const** std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;Fault const* const, Fault const*&gt; (5 samples, 0.19%)</title><rect x="12.8788%" y="1189" width="0.1894%" height="15" fill="rgb(247,98,35)" fg:x="340" fg:w="5"/><text x="13.1288%" y="1199.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.19%)</title><rect x="12.8788%" y="1173" width="0.1894%" height="15" fill="rgb(247,138,52)" fg:x="340" fg:w="5"/><text x="13.1288%" y="1183.50"></text></g><g><title>boost::random::detail::real_alias_table&lt;int, double&gt;::real_alias_table (3 samples, 0.11%)</title><rect x="13.0682%" y="1317" width="0.1136%" height="15" fill="rgb(213,79,30)" fg:x="345" fg:w="3"/><text x="13.3182%" y="1327.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::vector (3 samples, 0.11%)</title><rect x="13.0682%" y="1301" width="0.1136%" height="15" fill="rgb(246,177,23)" fg:x="345" fg:w="3"/><text x="13.3182%" y="1311.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_Vector_base (3 samples, 0.11%)</title><rect x="13.0682%" y="1285" width="0.1136%" height="15" fill="rgb(230,62,27)" fg:x="345" fg:w="3"/><text x="13.3182%" y="1295.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_Vector_impl::_Vector_impl (3 samples, 0.11%)</title><rect x="13.0682%" y="1269" width="0.1136%" height="15" fill="rgb(216,154,8)" fg:x="345" fg:w="3"/><text x="13.3182%" y="1279.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (3 samples, 0.11%)</title><rect x="13.0682%" y="1253" width="0.1136%" height="15" fill="rgb(244,35,45)" fg:x="345" fg:w="3"/><text x="13.3182%" y="1263.50"></text></g><g><title>boost::random::detail::real_alias_table&lt;int, double&gt;::normalize (30 samples, 1.14%)</title><rect x="18.3333%" y="1285" width="1.1364%" height="15" fill="rgb(251,115,12)" fg:x="484" fg:w="30"/><text x="18.5833%" y="1295.50"></text></g><g><title>double std::accumulate&lt;double const*, double&gt; (8 samples, 0.30%)</title><rect x="19.5076%" y="1269" width="0.3030%" height="15" fill="rgb(240,54,50)" fg:x="515" fg:w="8"/><text x="19.7576%" y="1279.50"></text></g><g><title>malloc (56 samples, 2.12%)</title><rect x="22.9924%" y="1173" width="2.1212%" height="15" fill="rgb(233,84,52)" fg:x="607" fg:w="56"/><text x="23.2424%" y="1183.50">m..</text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_allocate (83 samples, 3.14%)</title><rect x="22.0455%" y="1237" width="3.1439%" height="15" fill="rgb(207,117,47)" fg:x="582" fg:w="83"/><text x="22.2955%" y="1247.50">std..</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::allocate (83 samples, 3.14%)</title><rect x="22.0455%" y="1221" width="3.1439%" height="15" fill="rgb(249,43,39)" fg:x="582" fg:w="83"/><text x="22.2955%" y="1231.50">std..</text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::allocate (83 samples, 3.14%)</title><rect x="22.0455%" y="1205" width="3.1439%" height="15" fill="rgb(209,38,44)" fg:x="582" fg:w="83"/><text x="22.2955%" y="1215.50">std..</text></g><g><title>operator new (75 samples, 2.84%)</title><rect x="22.3485%" y="1189" width="2.8409%" height="15" fill="rgb(236,212,23)" fg:x="590" fg:w="75"/><text x="22.5985%" y="1199.50">op..</text></g><g><title>malloc@plt (2 samples, 0.08%)</title><rect x="25.1136%" y="1173" width="0.0758%" height="15" fill="rgb(242,79,21)" fg:x="663" fg:w="2"/><text x="25.3636%" y="1183.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_deallocate (5 samples, 0.19%)</title><rect x="25.1894%" y="1237" width="0.1894%" height="15" fill="rgb(211,96,35)" fg:x="665" fg:w="5"/><text x="25.4394%" y="1247.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__uninitialized_default_n_a&lt;std::pair&lt;double, int&gt;*, unsigned long, std::pair&lt;double, int&gt; &gt; (19 samples, 0.72%)</title><rect x="25.3788%" y="1237" width="0.7197%" height="15" fill="rgb(253,215,40)" fg:x="670" fg:w="19"/><text x="25.6288%" y="1247.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__uninitialized_default_n&lt;std::pair&lt;double, int&gt;*, unsigned long&gt; (19 samples, 0.72%)</title><rect x="25.3788%" y="1221" width="0.7197%" height="15" fill="rgb(211,81,21)" fg:x="670" fg:w="19"/><text x="25.6288%" y="1231.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;std::pair&lt;double, int&gt;*, unsigned long&gt; (19 samples, 0.72%)</title><rect x="25.3788%" y="1205" width="0.7197%" height="15" fill="rgb(208,190,38)" fg:x="670" fg:w="19"/><text x="25.6288%" y="1215.50"></text></g><g><title>void std::_Construct&lt;std::pair&lt;double, int&gt;&gt; (6 samples, 0.23%)</title><rect x="25.8712%" y="1189" width="0.2273%" height="15" fill="rgb(235,213,38)" fg:x="683" fg:w="6"/><text x="26.1212%" y="1199.50"></text></g><g><title>std::pair&lt;double, int&gt;::pair&lt;double, int, true&gt; (6 samples, 0.23%)</title><rect x="25.8712%" y="1173" width="0.2273%" height="15" fill="rgb(237,122,38)" fg:x="683" fg:w="6"/><text x="26.1212%" y="1183.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_check_len (8 samples, 0.30%)</title><rect x="26.0985%" y="1237" width="0.3030%" height="15" fill="rgb(244,218,35)" fg:x="689" fg:w="8"/><text x="26.3485%" y="1247.50"></text></g><g><title>unsigned long const&amp; std::max&lt;unsigned long&gt; (4 samples, 0.15%)</title><rect x="26.2500%" y="1221" width="0.1515%" height="15" fill="rgb(240,68,47)" fg:x="693" fg:w="4"/><text x="26.5000%" y="1231.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_S_relocate (5 samples, 0.19%)</title><rect x="26.4015%" y="1237" width="0.1894%" height="15" fill="rgb(210,16,53)" fg:x="697" fg:w="5"/><text x="26.6515%" y="1247.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__relocate_a&lt;std::pair&lt;double, int&gt;*, std::pair&lt;double, int&gt;*, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt; (5 samples, 0.19%)</title><rect x="26.4015%" y="1221" width="0.1894%" height="15" fill="rgb(235,124,12)" fg:x="697" fg:w="5"/><text x="26.6515%" y="1231.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__relocate_a_1&lt;std::pair&lt;double, int&gt;*, std::pair&lt;double, int&gt;*, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt; (5 samples, 0.19%)</title><rect x="26.4015%" y="1205" width="0.1894%" height="15" fill="rgb(224,169,11)" fg:x="697" fg:w="5"/><text x="26.6515%" y="1215.50"></text></g><g><title>double boost::random::detail::real_alias_table&lt;int, double&gt;::init_average&lt;double const*&gt; (199 samples, 7.54%)</title><rect x="19.4697%" y="1285" width="7.5379%" height="15" fill="rgb(250,166,2)" fg:x="514" fg:w="199"/><text x="19.7197%" y="1295.50">double boo..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::resize (190 samples, 7.20%)</title><rect x="19.8106%" y="1269" width="7.1970%" height="15" fill="rgb(242,216,29)" fg:x="523" fg:w="190"/><text x="20.0606%" y="1279.50">std::vecto..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_default_append (183 samples, 6.93%)</title><rect x="20.0758%" y="1253" width="6.9318%" height="15" fill="rgb(230,116,27)" fg:x="530" fg:w="183"/><text x="20.3258%" y="1263.50">std::vect..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::size (11 samples, 0.42%)</title><rect x="26.5909%" y="1237" width="0.4167%" height="15" fill="rgb(228,99,48)" fg:x="702" fg:w="11"/><text x="26.8409%" y="1247.50"></text></g><g><title>std::pair&lt;double, int&gt;::operator= (53 samples, 2.01%)</title><rect x="27.0076%" y="1285" width="2.0076%" height="15" fill="rgb(253,11,6)" fg:x="713" fg:w="53"/><text x="27.2576%" y="1295.50">s..</text></g><g><title>std::pair&lt;double, int&gt;::pair&lt;double&amp;, int, true&gt; (4 samples, 0.15%)</title><rect x="29.0152%" y="1285" width="0.1515%" height="15" fill="rgb(247,143,39)" fg:x="766" fg:w="4"/><text x="29.2652%" y="1295.50"></text></g><g><title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;double&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;int&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;double&amp;, int&amp;&gt; (2 samples, 0.08%)</title><rect x="29.1667%" y="1285" width="0.0758%" height="15" fill="rgb(236,97,10)" fg:x="770" fg:w="2"/><text x="29.4167%" y="1295.50"></text></g><g><title>std::pair&lt;double, int&gt;::pair&lt;double&amp;, int&amp;, true&gt; (2 samples, 0.08%)</title><rect x="29.1667%" y="1269" width="0.0758%" height="15" fill="rgb(233,208,19)" fg:x="770" fg:w="2"/><text x="29.4167%" y="1279.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::begin (3 samples, 0.11%)</title><rect x="29.2424%" y="1285" width="0.1136%" height="15" fill="rgb(216,164,2)" fg:x="772" fg:w="3"/><text x="29.4924%" y="1295.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;double, int&gt;*, std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt; &gt;::__normal_iterator (3 samples, 0.11%)</title><rect x="29.2424%" y="1269" width="0.1136%" height="15" fill="rgb(220,129,5)" fg:x="772" fg:w="3"/><text x="29.4924%" y="1279.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::operator[] (4 samples, 0.15%)</title><rect x="29.3561%" y="1285" width="0.1515%" height="15" fill="rgb(242,17,10)" fg:x="775" fg:w="4"/><text x="29.6061%" y="1295.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::push_back (175 samples, 6.63%)</title><rect x="29.5076%" y="1285" width="6.6288%" height="15" fill="rgb(242,107,0)" fg:x="779" fg:w="175"/><text x="29.7576%" y="1295.50">std::vect..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::construct&lt;std::pair&lt;double, int&gt;, std::pair&lt;double, int&gt; const&amp;&gt; (157 samples, 5.95%)</title><rect x="30.1894%" y="1269" width="5.9470%" height="15" fill="rgb(251,28,31)" fg:x="797" fg:w="157"/><text x="30.4394%" y="1279.50">void std..</text></g><g><title>void std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::construct&lt;std::pair&lt;double, int&gt;, std::pair&lt;double, int&gt; const&amp;&gt; (157 samples, 5.95%)</title><rect x="30.1894%" y="1253" width="5.9470%" height="15" fill="rgb(233,223,10)" fg:x="797" fg:w="157"/><text x="30.4394%" y="1263.50">void std..</text></g><g><title>malloc (123 samples, 4.66%)</title><rect x="41.1742%" y="1205" width="4.6591%" height="15" fill="rgb(215,21,27)" fg:x="1087" fg:w="123"/><text x="41.4242%" y="1215.50">malloc</text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_allocate (179 samples, 6.78%)</title><rect x="39.2045%" y="1269" width="6.7803%" height="15" fill="rgb(232,23,21)" fg:x="1035" fg:w="179"/><text x="39.4545%" y="1279.50">std::_Vec..</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::allocate (179 samples, 6.78%)</title><rect x="39.2045%" y="1253" width="6.7803%" height="15" fill="rgb(244,5,23)" fg:x="1035" fg:w="179"/><text x="39.4545%" y="1263.50">std::allo..</text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::allocate (179 samples, 6.78%)</title><rect x="39.2045%" y="1237" width="6.7803%" height="15" fill="rgb(226,81,46)" fg:x="1035" fg:w="179"/><text x="39.4545%" y="1247.50">std::__ne..</text></g><g><title>operator new (155 samples, 5.87%)</title><rect x="40.1136%" y="1221" width="5.8712%" height="15" fill="rgb(247,70,30)" fg:x="1059" fg:w="155"/><text x="40.3636%" y="1231.50">operato..</text></g><g><title>malloc@plt (4 samples, 0.15%)</title><rect x="45.8333%" y="1205" width="0.1515%" height="15" fill="rgb(212,68,19)" fg:x="1210" fg:w="4"/><text x="46.0833%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_deallocate (3 samples, 0.11%)</title><rect x="45.9848%" y="1269" width="0.1136%" height="15" fill="rgb(240,187,13)" fg:x="1214" fg:w="3"/><text x="46.2348%" y="1279.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_S_relocate (10 samples, 0.38%)</title><rect x="46.0985%" y="1269" width="0.3788%" height="15" fill="rgb(223,113,26)" fg:x="1217" fg:w="10"/><text x="46.3485%" y="1279.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__relocate_a&lt;std::pair&lt;double, int&gt;*, std::pair&lt;double, int&gt;*, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt; (10 samples, 0.38%)</title><rect x="46.0985%" y="1253" width="0.3788%" height="15" fill="rgb(206,192,2)" fg:x="1217" fg:w="10"/><text x="46.3485%" y="1263.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__relocate_a_1&lt;std::pair&lt;double, int&gt;*, std::pair&lt;double, int&gt;*, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt; (10 samples, 0.38%)</title><rect x="46.0985%" y="1237" width="0.3788%" height="15" fill="rgb(241,108,4)" fg:x="1217" fg:w="10"/><text x="46.3485%" y="1247.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::capacity (12 samples, 0.45%)</title><rect x="46.4773%" y="1269" width="0.4545%" height="15" fill="rgb(247,173,49)" fg:x="1227" fg:w="12"/><text x="46.7273%" y="1279.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::reserve (291 samples, 11.02%)</title><rect x="36.1364%" y="1285" width="11.0227%" height="15" fill="rgb(224,114,35)" fg:x="954" fg:w="291"/><text x="36.3864%" y="1295.50">std::vector&lt;std:..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::size (6 samples, 0.23%)</title><rect x="46.9318%" y="1269" width="0.2273%" height="15" fill="rgb(245,159,27)" fg:x="1239" fg:w="6"/><text x="47.1818%" y="1279.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::vector (5 samples, 0.19%)</title><rect x="47.1591%" y="1285" width="0.1894%" height="15" fill="rgb(245,172,44)" fg:x="1245" fg:w="5"/><text x="47.4091%" y="1295.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_Vector_base (5 samples, 0.19%)</title><rect x="47.1591%" y="1269" width="0.1894%" height="15" fill="rgb(236,23,11)" fg:x="1245" fg:w="5"/><text x="47.4091%" y="1279.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_Vector_impl::_Vector_impl (5 samples, 0.19%)</title><rect x="47.1591%" y="1253" width="0.1894%" height="15" fill="rgb(205,117,38)" fg:x="1245" fg:w="5"/><text x="47.4091%" y="1263.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (5 samples, 0.19%)</title><rect x="47.1591%" y="1237" width="0.1894%" height="15" fill="rgb(237,72,25)" fg:x="1245" fg:w="5"/><text x="47.4091%" y="1247.50"></text></g><g><title>cfree@GLIBC_2.2.5 (227 samples, 8.60%)</title><rect x="48.3712%" y="1205" width="8.5985%" height="15" fill="rgb(244,70,9)" fg:x="1277" fg:w="227"/><text x="48.6212%" y="1215.50">cfree@GLIBC_..</text></g><g><title>_int_free (156 samples, 5.91%)</title><rect x="51.0606%" y="1189" width="5.9091%" height="15" fill="rgb(217,125,39)" fg:x="1348" fg:w="156"/><text x="51.3106%" y="1199.50">_int_free</text></g><g><title>free@plt (4 samples, 0.15%)</title><rect x="56.9697%" y="1205" width="0.1515%" height="15" fill="rgb(235,36,10)" fg:x="1504" fg:w="4"/><text x="57.2197%" y="1215.50"></text></g><g><title>boost::random::discrete_distribution&lt;int, double&gt;::discrete_distribution&lt;double [2]&gt; (1,183 samples, 44.81%)</title><rect x="13.0682%" y="1333" width="44.8106%" height="15" fill="rgb(251,123,47)" fg:x="345" fg:w="1183"/><text x="13.3182%" y="1343.50">boost::random::discrete_distribution&lt;int, double&gt;::discrete_distribution&lt;..</text></g><g><title>void boost::random::discrete_distribution&lt;int, double&gt;::init&lt;double const*&gt; (1,180 samples, 44.70%)</title><rect x="13.1818%" y="1317" width="44.6970%" height="15" fill="rgb(221,13,13)" fg:x="348" fg:w="1180"/><text x="13.4318%" y="1327.50">void boost::random::discrete_distribution&lt;int, double&gt;::init&lt;double const..</text></g><g><title>void boost::random::discrete_distribution&lt;int, double&gt;::init&lt;double const*&gt; (1,180 samples, 44.70%)</title><rect x="13.1818%" y="1301" width="44.6970%" height="15" fill="rgb(238,131,9)" fg:x="348" fg:w="1180"/><text x="13.4318%" y="1311.50">void boost::random::discrete_distribution&lt;int, double&gt;::init&lt;double const..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::~vector (278 samples, 10.53%)</title><rect x="47.3485%" y="1285" width="10.5303%" height="15" fill="rgb(211,50,8)" fg:x="1250" fg:w="278"/><text x="47.5985%" y="1295.50">std::vector&lt;std..</text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::~_Vector_base (278 samples, 10.53%)</title><rect x="47.3485%" y="1269" width="10.5303%" height="15" fill="rgb(245,182,24)" fg:x="1250" fg:w="278"/><text x="47.5985%" y="1279.50">std::_Vector_ba..</text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_deallocate (272 samples, 10.30%)</title><rect x="47.5758%" y="1253" width="10.3030%" height="15" fill="rgb(242,14,37)" fg:x="1256" fg:w="272"/><text x="47.8258%" y="1263.50">std::_Vector_ba..</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::deallocate (265 samples, 10.04%)</title><rect x="47.8409%" y="1237" width="10.0379%" height="15" fill="rgb(246,228,12)" fg:x="1263" fg:w="265"/><text x="48.0909%" y="1247.50">std::allocator_..</text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::deallocate (265 samples, 10.04%)</title><rect x="47.8409%" y="1221" width="10.0379%" height="15" fill="rgb(213,55,15)" fg:x="1263" fg:w="265"/><text x="48.0909%" y="1231.50">std::__new_allo..</text></g><g><title>operator delete (20 samples, 0.76%)</title><rect x="57.1212%" y="1205" width="0.7576%" height="15" fill="rgb(209,9,3)" fg:x="1508" fg:w="20"/><text x="57.3712%" y="1215.50"></text></g><g><title>cfree@GLIBC_2.2.5 (127 samples, 4.81%)</title><rect x="59.3939%" y="1221" width="4.8106%" height="15" fill="rgb(230,59,30)" fg:x="1568" fg:w="127"/><text x="59.6439%" y="1231.50">cfree@..</text></g><g><title>_int_free (71 samples, 2.69%)</title><rect x="61.5152%" y="1205" width="2.6894%" height="15" fill="rgb(209,121,21)" fg:x="1624" fg:w="71"/><text x="61.7652%" y="1215.50">_i..</text></g><g><title>free@plt (1 samples, 0.04%)</title><rect x="64.2045%" y="1221" width="0.0379%" height="15" fill="rgb(220,109,13)" fg:x="1695" fg:w="1"/><text x="64.4545%" y="1231.50"></text></g><g><title>boost::random::discrete_distribution&lt;int, double&gt;::~discrete_distribution (174 samples, 6.59%)</title><rect x="57.8788%" y="1333" width="6.5909%" height="15" fill="rgb(232,18,1)" fg:x="1528" fg:w="174"/><text x="58.1288%" y="1343.50">boost::ra..</text></g><g><title>boost::random::detail::real_alias_table&lt;int, double&gt;::~real_alias_table (174 samples, 6.59%)</title><rect x="57.8788%" y="1317" width="6.5909%" height="15" fill="rgb(215,41,42)" fg:x="1528" fg:w="174"/><text x="58.1288%" y="1327.50">boost::ra..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::~vector (174 samples, 6.59%)</title><rect x="57.8788%" y="1301" width="6.5909%" height="15" fill="rgb(224,123,36)" fg:x="1528" fg:w="174"/><text x="58.1288%" y="1311.50">std::vect..</text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::~_Vector_base (174 samples, 6.59%)</title><rect x="57.8788%" y="1285" width="6.5909%" height="15" fill="rgb(240,125,3)" fg:x="1528" fg:w="174"/><text x="58.1288%" y="1295.50">std::_Vec..</text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_deallocate (163 samples, 6.17%)</title><rect x="58.2955%" y="1269" width="6.1742%" height="15" fill="rgb(205,98,50)" fg:x="1539" fg:w="163"/><text x="58.5455%" y="1279.50">std::_Ve..</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::deallocate (146 samples, 5.53%)</title><rect x="58.9394%" y="1253" width="5.5303%" height="15" fill="rgb(205,185,37)" fg:x="1556" fg:w="146"/><text x="59.1894%" y="1263.50">std::al..</text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::deallocate (146 samples, 5.53%)</title><rect x="58.9394%" y="1237" width="5.5303%" height="15" fill="rgb(238,207,15)" fg:x="1556" fg:w="146"/><text x="59.1894%" y="1247.50">std::__..</text></g><g><title>operator delete (6 samples, 0.23%)</title><rect x="64.2424%" y="1221" width="0.2273%" height="15" fill="rgb(213,199,42)" fg:x="1696" fg:w="6"/><text x="64.4924%" y="1231.50"></text></g><g><title>boost::random::discrete_distribution&lt;int, double&gt;::max (6 samples, 0.23%)</title><rect x="66.5530%" y="1317" width="0.2273%" height="15" fill="rgb(235,201,11)" fg:x="1757" fg:w="6"/><text x="66.8030%" y="1327.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::size (4 samples, 0.15%)</title><rect x="66.6288%" y="1301" width="0.1515%" height="15" fill="rgb(207,46,11)" fg:x="1759" fg:w="4"/><text x="66.8788%" y="1311.50"></text></g><g><title>boost::random::uniform_int_distribution&lt;int&gt;::uniform_int_distribution (3 samples, 0.11%)</title><rect x="66.7803%" y="1317" width="0.1136%" height="15" fill="rgb(241,35,35)" fg:x="1763" fg:w="3"/><text x="67.0303%" y="1327.50"></text></g><g><title>double boost::random::detail::real_alias_table&lt;int, double&gt;::test&lt;boost::random::mersenne_twister_engine&lt;unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u&gt; &gt; (34 samples, 1.29%)</title><rect x="66.8939%" y="1317" width="1.2879%" height="15" fill="rgb(243,32,47)" fg:x="1766" fg:w="34"/><text x="67.1439%" y="1327.50"></text></g><g><title>double boost::random::detail::new_uniform_01&lt;double&gt;::operator (34 samples, 1.29%)</title><rect x="66.8939%" y="1301" width="1.2879%" height="15" fill="rgb(247,202,23)" fg:x="1766" fg:w="34"/><text x="67.1439%" y="1311.50"></text></g><g><title>boost::random::mersenne_twister_engine&lt;unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u&gt;::operator (21 samples, 0.80%)</title><rect x="67.3864%" y="1285" width="0.7955%" height="15" fill="rgb(219,102,11)" fg:x="1779" fg:w="21"/><text x="67.6364%" y="1295.50"></text></g><g><title>boost::random::detail::add&lt;unsigned int, int, true&gt;::operator (6 samples, 0.23%)</title><rect x="69.6212%" y="1269" width="0.2273%" height="15" fill="rgb(243,110,44)" fg:x="1838" fg:w="6"/><text x="69.8712%" y="1279.50"></text></g><g><title>int boost::random::uniform_int_distribution&lt;int&gt;::operator (127 samples, 4.81%)</title><rect x="68.1818%" y="1317" width="4.8106%" height="15" fill="rgb(222,74,54)" fg:x="1800" fg:w="127"/><text x="68.4318%" y="1327.50">int bo..</text></g><g><title>int boost::random::detail::generate_uniform_int&lt;boost::random::mersenne_twister_engine&lt;unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u&gt;, int&gt; (127 samples, 4.81%)</title><rect x="68.1818%" y="1301" width="4.8106%" height="15" fill="rgb(216,99,12)" fg:x="1800" fg:w="127"/><text x="68.4318%" y="1311.50">int bo..</text></g><g><title>int boost::random::detail::generate_uniform_int&lt;boost::random::mersenne_twister_engine&lt;unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u&gt;, int&gt; (127 samples, 4.81%)</title><rect x="68.1818%" y="1285" width="4.8106%" height="15" fill="rgb(226,22,26)" fg:x="1800" fg:w="127"/><text x="68.4318%" y="1295.50">int bo..</text></g><g><title>boost::random::mersenne_twister_engine&lt;unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u&gt;::operator (83 samples, 3.14%)</title><rect x="69.8485%" y="1269" width="3.1439%" height="15" fill="rgb(217,163,10)" fg:x="1844" fg:w="83"/><text x="70.0985%" y="1279.50">boo..</text></g><g><title>boost::random::mersenne_twister_engine&lt;unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u&gt;::twist (33 samples, 1.25%)</title><rect x="71.7424%" y="1253" width="1.2500%" height="15" fill="rgb(213,25,53)" fg:x="1894" fg:w="33"/><text x="71.9924%" y="1263.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::begin (1 samples, 0.04%)</title><rect x="72.9924%" y="1301" width="0.0379%" height="15" fill="rgb(252,105,26)" fg:x="1927" fg:w="1"/><text x="73.2424%" y="1311.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;double, int&gt; const*, std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.04%)</title><rect x="72.9924%" y="1285" width="0.0379%" height="15" fill="rgb(220,39,43)" fg:x="1927" fg:w="1"/><text x="73.2424%" y="1295.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::empty (3 samples, 0.11%)</title><rect x="72.9924%" y="1317" width="0.1136%" height="15" fill="rgb(229,68,48)" fg:x="1927" fg:w="3"/><text x="73.2424%" y="1327.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::end (2 samples, 0.08%)</title><rect x="73.0303%" y="1301" width="0.0758%" height="15" fill="rgb(252,8,32)" fg:x="1928" fg:w="2"/><text x="73.2803%" y="1311.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;double, int&gt; const*, std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt; &gt;::__normal_iterator (2 samples, 0.08%)</title><rect x="73.0303%" y="1285" width="0.0758%" height="15" fill="rgb(223,20,43)" fg:x="1928" fg:w="2"/><text x="73.2803%" y="1295.50"></text></g><g><title>int boost::random::discrete_distribution&lt;int, double&gt;::operator (233 samples, 8.83%)</title><rect x="64.4697%" y="1333" width="8.8258%" height="15" fill="rgb(229,81,49)" fg:x="1702" fg:w="233"/><text x="64.7197%" y="1343.50">int boost::r..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::operator[] (5 samples, 0.19%)</title><rect x="73.1061%" y="1317" width="0.1894%" height="15" fill="rgb(236,28,36)" fg:x="1930" fg:w="5"/><text x="73.3561%" y="1327.50"></text></g><g><title>std::unique_ptr&lt;Fault const, std::default_delete&lt;Fault const&gt; &gt;::get (13 samples, 0.49%)</title><rect x="73.2955%" y="1333" width="0.4924%" height="15" fill="rgb(249,185,26)" fg:x="1935" fg:w="13"/><text x="73.5455%" y="1343.50"></text></g><g><title>std::__uniq_ptr_impl&lt;Fault const, std::default_delete&lt;Fault const&gt; &gt;::_M_ptr (13 samples, 0.49%)</title><rect x="73.2955%" y="1317" width="0.4924%" height="15" fill="rgb(249,174,33)" fg:x="1935" fg:w="13"/><text x="73.5455%" y="1327.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;Fault const*&gt; &gt;::construct&lt;Fault const*, Fault const*&gt; (2 samples, 0.08%)</title><rect x="73.8258%" y="1301" width="0.0758%" height="15" fill="rgb(233,201,37)" fg:x="1949" fg:w="2"/><text x="74.0758%" y="1311.50"></text></g><g><title>void std::__new_allocator&lt;Fault const*&gt;::construct&lt;Fault const*, Fault const*&gt; (2 samples, 0.08%)</title><rect x="73.8258%" y="1285" width="0.0758%" height="15" fill="rgb(221,78,26)" fg:x="1949" fg:w="2"/><text x="74.0758%" y="1295.50"></text></g><g><title>std::_Vector_base&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::_M_allocate (1 samples, 0.04%)</title><rect x="73.9015%" y="1285" width="0.0379%" height="15" fill="rgb(250,127,30)" fg:x="1951" fg:w="1"/><text x="74.1515%" y="1295.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;Fault const*&gt; &gt;::allocate (1 samples, 0.04%)</title><rect x="73.9015%" y="1269" width="0.0379%" height="15" fill="rgb(230,49,44)" fg:x="1951" fg:w="1"/><text x="74.1515%" y="1279.50"></text></g><g><title>std::__new_allocator&lt;Fault const*&gt;::allocate (1 samples, 0.04%)</title><rect x="73.9015%" y="1253" width="0.0379%" height="15" fill="rgb(229,67,23)" fg:x="1951" fg:w="1"/><text x="74.1515%" y="1263.50"></text></g><g><title>operator new (1 samples, 0.04%)</title><rect x="73.9015%" y="1237" width="0.0379%" height="15" fill="rgb(249,83,47)" fg:x="1951" fg:w="1"/><text x="74.1515%" y="1247.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="73.9015%" y="1221" width="0.0379%" height="15" fill="rgb(215,43,3)" fg:x="1951" fg:w="1"/><text x="74.1515%" y="1231.50"></text></g><g><title>_int_malloc (1 samples, 0.04%)</title><rect x="73.9015%" y="1205" width="0.0379%" height="15" fill="rgb(238,154,13)" fg:x="1951" fg:w="1"/><text x="74.1515%" y="1215.50"></text></g><g><title>FaultManager::SampleRandomFault (1,662 samples, 62.95%)</title><rect x="11.1742%" y="1349" width="62.9545%" height="15" fill="rgb(219,56,2)" fg:x="295" fg:w="1662"/><text x="11.4242%" y="1359.50">FaultManager::SampleRandomFault</text></g><g><title>std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::push_back (9 samples, 0.34%)</title><rect x="73.7879%" y="1333" width="0.3409%" height="15" fill="rgb(233,0,4)" fg:x="1948" fg:w="9"/><text x="74.0379%" y="1343.50"></text></g><g><title>Fault const*&amp; std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::emplace_back&lt;Fault const*&gt; (9 samples, 0.34%)</title><rect x="73.7879%" y="1317" width="0.3409%" height="15" fill="rgb(235,30,7)" fg:x="1948" fg:w="9"/><text x="74.0379%" y="1327.50"></text></g><g><title>void std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::_M_realloc_insert&lt;Fault const*&gt; (6 samples, 0.23%)</title><rect x="73.9015%" y="1301" width="0.2273%" height="15" fill="rgb(250,79,13)" fg:x="1951" fg:w="6"/><text x="74.1515%" y="1311.50"></text></g><g><title>std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::_S_relocate (5 samples, 0.19%)</title><rect x="73.9394%" y="1285" width="0.1894%" height="15" fill="rgb(211,146,34)" fg:x="1952" fg:w="5"/><text x="74.1894%" y="1295.50"></text></g><g><title>Fault const** std::__relocate_a&lt;Fault const**, Fault const**, std::allocator&lt;Fault const*&gt; &gt; (5 samples, 0.19%)</title><rect x="73.9394%" y="1269" width="0.1894%" height="15" fill="rgb(228,22,38)" fg:x="1952" fg:w="5"/><text x="74.1894%" y="1279.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;Fault const*, void&gt;::value, Fault const**&gt;::type std::__relocate_a_1&lt;Fault const*, Fault const*&gt; (5 samples, 0.19%)</title><rect x="73.9394%" y="1253" width="0.1894%" height="15" fill="rgb(235,168,5)" fg:x="1952" fg:w="5"/><text x="74.1894%" y="1263.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.19%)</title><rect x="73.9394%" y="1237" width="0.1894%" height="15" fill="rgb(221,155,16)" fg:x="1952" fg:w="5"/><text x="74.1894%" y="1247.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;FaultSet&gt; &gt;::construct&lt;FaultSet, FaultSet&gt; (1 samples, 0.04%)</title><rect x="74.1288%" y="1333" width="0.0379%" height="15" fill="rgb(215,215,53)" fg:x="1957" fg:w="1"/><text x="74.3788%" y="1343.50"></text></g><g><title>void std::__new_allocator&lt;FaultSet&gt;::construct&lt;FaultSet, FaultSet&gt; (1 samples, 0.04%)</title><rect x="74.1288%" y="1317" width="0.0379%" height="15" fill="rgb(223,4,10)" fg:x="1957" fg:w="1"/><text x="74.3788%" y="1327.50"></text></g><g><title>FaultSet::FaultSet (1 samples, 0.04%)</title><rect x="74.1288%" y="1301" width="0.0379%" height="15" fill="rgb(234,103,6)" fg:x="1957" fg:w="1"/><text x="74.3788%" y="1311.50"></text></g><g><title>std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::vector (1 samples, 0.04%)</title><rect x="74.1288%" y="1285" width="0.0379%" height="15" fill="rgb(227,97,0)" fg:x="1957" fg:w="1"/><text x="74.3788%" y="1295.50"></text></g><g><title>Fault const** std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**, Fault const*&gt; (1 samples, 0.04%)</title><rect x="74.1288%" y="1269" width="0.0379%" height="15" fill="rgb(234,150,53)" fg:x="1957" fg:w="1"/><text x="74.3788%" y="1279.50"></text></g><g><title>Fault const** std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (1 samples, 0.04%)</title><rect x="74.1288%" y="1253" width="0.0379%" height="15" fill="rgb(228,201,54)" fg:x="1957" fg:w="1"/><text x="74.3788%" y="1263.50"></text></g><g><title>Fault const** std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (1 samples, 0.04%)</title><rect x="74.1288%" y="1237" width="0.0379%" height="15" fill="rgb(222,22,37)" fg:x="1957" fg:w="1"/><text x="74.3788%" y="1247.50"></text></g><g><title>Fault const** std::copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (1 samples, 0.04%)</title><rect x="74.1288%" y="1221" width="0.0379%" height="15" fill="rgb(237,53,32)" fg:x="1957" fg:w="1"/><text x="74.3788%" y="1231.50"></text></g><g><title>Fault const** std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (1 samples, 0.04%)</title><rect x="74.1288%" y="1205" width="0.0379%" height="15" fill="rgb(233,25,53)" fg:x="1957" fg:w="1"/><text x="74.3788%" y="1215.50"></text></g><g><title>Fault const** std::__copy_move_a1&lt;false, Fault const* const*, Fault const**&gt; (1 samples, 0.04%)</title><rect x="74.1288%" y="1189" width="0.0379%" height="15" fill="rgb(210,40,34)" fg:x="1957" fg:w="1"/><text x="74.3788%" y="1199.50"></text></g><g><title>Fault const** std::__copy_move_a2&lt;false, Fault const* const*, Fault const**&gt; (1 samples, 0.04%)</title><rect x="74.1288%" y="1173" width="0.0379%" height="15" fill="rgb(241,220,44)" fg:x="1957" fg:w="1"/><text x="74.3788%" y="1183.50"></text></g><g><title>Fault const** std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;Fault const* const, Fault const*&gt; (1 samples, 0.04%)</title><rect x="74.1288%" y="1157" width="0.0379%" height="15" fill="rgb(235,28,35)" fg:x="1957" fg:w="1"/><text x="74.3788%" y="1167.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="74.1288%" y="1141" width="0.0379%" height="15" fill="rgb(210,56,17)" fg:x="1957" fg:w="1"/><text x="74.3788%" y="1151.50"></text></g><g><title>FaultSet&amp; std::vector&lt;FaultSet, std::allocator&lt;FaultSet&gt; &gt;::emplace_back&lt;FaultSet&gt; (2 samples, 0.08%)</title><rect x="74.1288%" y="1349" width="0.0758%" height="15" fill="rgb(224,130,29)" fg:x="1957" fg:w="2"/><text x="74.3788%" y="1359.50"></text></g><g><title>void std::vector&lt;FaultSet, std::allocator&lt;FaultSet&gt; &gt;::_M_realloc_insert&lt;FaultSet&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1333" width="0.0379%" height="15" fill="rgb(235,212,8)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1343.50"></text></g><g><title>FaultSet* std::__uninitialized_move_if_noexcept_a&lt;FaultSet*, FaultSet*, std::allocator&lt;FaultSet&gt; &gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1317" width="0.0379%" height="15" fill="rgb(223,33,50)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1327.50"></text></g><g><title>FaultSet* std::__uninitialized_copy_a&lt;FaultSet const*, FaultSet*, FaultSet&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1301" width="0.0379%" height="15" fill="rgb(219,149,13)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1311.50"></text></g><g><title>FaultSet* std::uninitialized_copy&lt;FaultSet const*, FaultSet*&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1285" width="0.0379%" height="15" fill="rgb(250,156,29)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1295.50"></text></g><g><title>FaultSet* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;FaultSet const*, FaultSet*&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1269" width="0.0379%" height="15" fill="rgb(216,193,19)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1279.50"></text></g><g><title>FaultSet* std::__do_uninit_copy&lt;FaultSet const*, FaultSet*&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1253" width="0.0379%" height="15" fill="rgb(216,135,14)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1263.50"></text></g><g><title>void std::_Construct&lt;FaultSet, FaultSet const&amp;&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1237" width="0.0379%" height="15" fill="rgb(241,47,5)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1247.50"></text></g><g><title>FaultSet::FaultSet (1 samples, 0.04%)</title><rect x="74.1667%" y="1221" width="0.0379%" height="15" fill="rgb(233,42,35)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1231.50"></text></g><g><title>std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::vector (1 samples, 0.04%)</title><rect x="74.1667%" y="1205" width="0.0379%" height="15" fill="rgb(231,13,6)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1215.50"></text></g><g><title>Fault const** std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**, Fault const*&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1189" width="0.0379%" height="15" fill="rgb(207,181,40)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1199.50"></text></g><g><title>Fault const** std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1173" width="0.0379%" height="15" fill="rgb(254,173,49)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1183.50"></text></g><g><title>Fault const** std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1157" width="0.0379%" height="15" fill="rgb(221,1,38)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1167.50"></text></g><g><title>Fault const** std::copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1141" width="0.0379%" height="15" fill="rgb(206,124,46)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1151.50"></text></g><g><title>Fault const** std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1125" width="0.0379%" height="15" fill="rgb(249,21,11)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1135.50"></text></g><g><title>Fault const** std::__copy_move_a1&lt;false, Fault const* const*, Fault const**&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1109" width="0.0379%" height="15" fill="rgb(222,201,40)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1119.50"></text></g><g><title>Fault const** std::__copy_move_a2&lt;false, Fault const* const*, Fault const**&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1093" width="0.0379%" height="15" fill="rgb(235,61,29)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1103.50"></text></g><g><title>Fault const** std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;Fault const* const, Fault const*&gt; (1 samples, 0.04%)</title><rect x="74.1667%" y="1077" width="0.0379%" height="15" fill="rgb(219,207,3)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1087.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="74.1667%" y="1061" width="0.0379%" height="15" fill="rgb(222,56,46)" fg:x="1958" fg:w="1"/><text x="74.4167%" y="1071.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_default_append (2 samples, 0.08%)</title><rect x="74.2045%" y="1349" width="0.0758%" height="15" fill="rgb(239,76,54)" fg:x="1959" fg:w="2"/><text x="74.4545%" y="1359.50"></text></g><g><title>SampledRFAdversary::MultithreadedAnalysis (1,667 samples, 63.14%)</title><rect x="11.1742%" y="1381" width="63.1439%" height="15" fill="rgb(231,124,27)" fg:x="295" fg:w="1667"/><text x="11.4242%" y="1391.50">SampledRFAdversary::MultithreadedAnalysis</text></g><g><title>FaultManager::SampleRandomFaultVector (1,667 samples, 63.14%)</title><rect x="11.1742%" y="1365" width="63.1439%" height="15" fill="rgb(249,195,6)" fg:x="295" fg:w="1667"/><text x="11.4242%" y="1375.50">FaultManager::SampleRandomFaultVector</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::reserve (1 samples, 0.04%)</title><rect x="74.2803%" y="1349" width="0.0379%" height="15" fill="rgb(237,174,47)" fg:x="1961" fg:w="1"/><text x="74.5303%" y="1359.50"></text></g><g><title>__GI___clone3 (1,688 samples, 63.94%)</title><rect x="10.4545%" y="1429" width="63.9394%" height="15" fill="rgb(206,201,31)" fg:x="276" fg:w="1688"/><text x="10.7045%" y="1439.50">__GI___clone3</text></g><g><title>start_thread (1,673 samples, 63.37%)</title><rect x="11.0227%" y="1413" width="63.3712%" height="15" fill="rgb(231,57,52)" fg:x="291" fg:w="1673"/><text x="11.2727%" y="1423.50">start_thread</text></g><g><title>gomp_thread_start (1,669 samples, 63.22%)</title><rect x="11.1742%" y="1397" width="63.2197%" height="15" fill="rgb(248,177,22)" fg:x="295" fg:w="1669"/><text x="11.4242%" y="1407.50">gomp_thread_start</text></g><g><title>gomp_barrier_wait_end (2 samples, 0.08%)</title><rect x="74.3182%" y="1381" width="0.0758%" height="15" fill="rgb(215,211,37)" fg:x="1962" fg:w="2"/><text x="74.5682%" y="1391.50"></text></g><g><title>_int_free (11 samples, 0.42%)</title><rect x="74.3939%" y="1429" width="0.4167%" height="15" fill="rgb(241,128,51)" fg:x="1964" fg:w="11"/><text x="74.6439%" y="1439.50"></text></g><g><title>Hardware::Library::Library (1 samples, 0.04%)</title><rect x="74.8106%" y="1349" width="0.0379%" height="15" fill="rgb(227,165,31)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1359.50"></text></g><g><title>Hardware::Cell&amp; std::vector&lt;Hardware::Cell, std::allocator&lt;Hardware::Cell&gt; &gt;::emplace_back&lt;boost::json::value const&amp;, bool&amp;&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1333" width="0.0379%" height="15" fill="rgb(228,167,24)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1343.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;Hardware::Cell&gt; &gt;::construct&lt;Hardware::Cell, boost::json::value const&amp;, bool&amp;&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1317" width="0.0379%" height="15" fill="rgb(228,143,12)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1327.50"></text></g><g><title>void std::__new_allocator&lt;Hardware::Cell&gt;::construct&lt;Hardware::Cell, boost::json::value const&amp;, bool&amp;&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1301" width="0.0379%" height="15" fill="rgb(249,149,8)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1311.50"></text></g><g><title>Hardware::Cell::Cell (1 samples, 0.04%)</title><rect x="74.8106%" y="1285" width="0.0379%" height="15" fill="rgb(243,35,44)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1295.50"></text></g><g><title>Hardware::Cell::SetOperations (1 samples, 0.04%)</title><rect x="74.8106%" y="1269" width="0.0379%" height="15" fill="rgb(246,89,9)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1279.50"></text></g><g><title>Hardware::Operation&lt;Hardware::CustomOperation&gt;::Operation (1 samples, 0.04%)</title><rect x="74.8106%" y="1253" width="0.0379%" height="15" fill="rgb(233,213,13)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1263.50"></text></g><g><title>bool boost::spirit::qi::phrase_parse&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::BooleanExpressionGrammar, boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1237" width="0.0379%" height="15" fill="rgb(233,141,41)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1247.50"></text></g><g><title>bool boost::spirit::qi::phrase_parse&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::BooleanExpressionGrammar, boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1221" width="0.0379%" height="15" fill="rgb(239,167,4)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1231.50"></text></g><g><title>bool boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;::parse&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::spirit::locals&lt;mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1205" width="0.0379%" height="15" fill="rgb(209,217,16)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1215.50"></text></g><g><title>bool boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt;::parse&lt;boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::spirit::locals&lt;mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1189" width="0.0379%" height="15" fill="rgb(219,88,35)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1199.50"></text></g><g><title>boost::function_n&lt;bool, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const&amp;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;&amp;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; const&amp;&gt;::operator (1 samples, 0.04%)</title><rect x="74.8106%" y="1173" width="0.0379%" height="15" fill="rgb(220,193,23)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1183.50"></text></g><g><title>boost::detail::function::function_obj_invoker&lt;boost::spirit::qi::detail::parser_binder&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [3], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, mpl_::bool_&lt;false&gt; &gt;, bool, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const&amp;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;&amp;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; const&amp;&gt;::invoke (1 samples, 0.04%)</title><rect x="74.8106%" y="1157" width="0.0379%" height="15" fill="rgb(230,90,52)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1167.50"></text></g><g><title>bool boost::spirit::qi::detail::parser_binder&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [3], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, mpl_::bool_&lt;false&gt; &gt;::operator (1 samples, 0.04%)</title><rect x="74.8106%" y="1141" width="0.0379%" height="15" fill="rgb(252,106,19)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1151.50"></text></g><g><title>bool boost::spirit::qi::detail::parser_binder&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [3], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, mpl_::bool_&lt;false&gt; &gt;::call&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1125" width="0.0379%" height="15" fill="rgb(206,74,20)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1135.50"></text></g><g><title>bool boost::spirit::qi::sequence_base&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [3], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [3], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;::parse&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, boost::spirit::unused_type const&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1109" width="0.0379%" height="15" fill="rgb(230,138,44)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1119.50"></text></g><g><title>bool boost::spirit::qi::sequence_base&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [3], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [3], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;::parse_impl&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, boost::spirit::unused_type const&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1093" width="0.0379%" height="15" fill="rgb(235,182,43)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1103.50"></text></g><g><title>bool boost::spirit::any_if&lt;boost::spirit::traits::attribute_not_unused&lt;boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [3], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt;, boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1077" width="0.0379%" height="15" fill="rgb(242,16,51)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1087.50"></text></g><g><title>bool boost::fusion::any&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [3], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt;, boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1061" width="0.0379%" height="15" fill="rgb(248,9,4)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1071.50"></text></g><g><title>bool boost::fusion::detail::any&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [3], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt;, boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt;, boost::fusion::forward_traversal_tag&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1045" width="0.0379%" height="15" fill="rgb(210,31,22)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1055.50"></text></g><g><title>bool boost::fusion::detail::linear_any&lt;boost::fusion::cons_iterator&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [3], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; const&gt;, boost::fusion::cons_iterator&lt;boost::fusion::nil_ const&gt;, boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="1029" width="0.0379%" height="15" fill="rgb(239,54,39)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1039.50"></text></g><g><title>bool boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt;::operator (1 samples, 0.04%)</title><rect x="74.8106%" y="1013" width="0.0379%" height="15" fill="rgb(230,99,41)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1023.50"></text></g><g><title>bool boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;::parse&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, boost::spirit::unused_type const&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="997" width="0.0379%" height="15" fill="rgb(253,106,12)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="1007.50"></text></g><g><title>bool boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;::parse&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="981" width="0.0379%" height="15" fill="rgb(213,46,41)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="991.50"></text></g><g><title>bool boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt;::parse&lt;boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="965" width="0.0379%" height="15" fill="rgb(215,133,35)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="975.50"></text></g><g><title>boost::function_n&lt;bool, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const&amp;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;&amp;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; const&amp;&gt;::operator (1 samples, 0.04%)</title><rect x="74.8106%" y="949" width="0.0379%" height="15" fill="rgb(213,28,5)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="959.50"></text></g><g><title>boost::detail::function::function_obj_invoker&lt;boost::spirit::qi::detail::parser_binder&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, mpl_::bool_&lt;false&gt; &gt;, bool, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const&amp;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;&amp;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; const&amp;&gt;::invoke (1 samples, 0.04%)</title><rect x="74.8106%" y="933" width="0.0379%" height="15" fill="rgb(215,77,49)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="943.50"></text></g><g><title>bool boost::spirit::qi::detail::parser_binder&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, mpl_::bool_&lt;false&gt; &gt;::operator (1 samples, 0.04%)</title><rect x="74.8106%" y="917" width="0.0379%" height="15" fill="rgb(248,100,22)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="927.50"></text></g><g><title>bool boost::spirit::qi::detail::parser_binder&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, mpl_::bool_&lt;false&gt; &gt;::call&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="901" width="0.0379%" height="15" fill="rgb(208,67,9)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="911.50"></text></g><g><title>bool boost::spirit::qi::sequence_base&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;::parse&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, boost::spirit::unused_type const&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="885" width="0.0379%" height="15" fill="rgb(219,133,21)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="895.50"></text></g><g><title>bool boost::spirit::qi::sequence_base&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;::parse_impl&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, boost::spirit::unused_type const&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="869" width="0.0379%" height="15" fill="rgb(246,46,29)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="879.50"></text></g><g><title>bool boost::spirit::any_if&lt;boost::spirit::traits::attribute_not_unused&lt;boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt;, boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="853" width="0.0379%" height="15" fill="rgb(246,185,52)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="863.50"></text></g><g><title>bool boost::fusion::any&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt;, boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="837" width="0.0379%" height="15" fill="rgb(252,136,11)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="847.50"></text></g><g><title>bool boost::fusion::detail::any&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt;, boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt;, boost::fusion::forward_traversal_tag&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="821" width="0.0379%" height="15" fill="rgb(219,138,53)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="831.50"></text></g><g><title>bool boost::fusion::detail::linear_any&lt;boost::fusion::cons_iterator&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; const&gt;, boost::fusion::cons_iterator&lt;boost::fusion::nil_ const&gt;, boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="805" width="0.0379%" height="15" fill="rgb(211,51,23)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="815.50"></text></g><g><title>bool boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt;::operator (1 samples, 0.04%)</title><rect x="74.8106%" y="789" width="0.0379%" height="15" fill="rgb(247,221,28)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="799.50"></text></g><g><title>bool boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;::parse&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, boost::spirit::unused_type const&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="773" width="0.0379%" height="15" fill="rgb(251,222,45)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="783.50"></text></g><g><title>bool boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;::parse&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="757" width="0.0379%" height="15" fill="rgb(217,162,53)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="767.50"></text></g><g><title>bool boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt;::parse&lt;boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="741" width="0.0379%" height="15" fill="rgb(229,93,14)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="751.50"></text></g><g><title>boost::function_n&lt;bool, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const&amp;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;&amp;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; const&amp;&gt;::operator (1 samples, 0.04%)</title><rect x="74.8106%" y="725" width="0.0379%" height="15" fill="rgb(209,67,49)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="735.50"></text></g><g><title>boost::detail::function::function_obj_invoker&lt;boost::spirit::qi::detail::parser_binder&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, mpl_::bool_&lt;false&gt; &gt;, bool, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const&amp;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;&amp;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; const&amp;&gt;::invoke (1 samples, 0.04%)</title><rect x="74.8106%" y="709" width="0.0379%" height="15" fill="rgb(213,87,29)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="719.50"></text></g><g><title>bool boost::spirit::qi::detail::parser_binder&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, mpl_::bool_&lt;false&gt; &gt;::operator (1 samples, 0.04%)</title><rect x="74.8106%" y="693" width="0.0379%" height="15" fill="rgb(205,151,52)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="703.50"></text></g><g><title>bool boost::spirit::qi::detail::parser_binder&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, mpl_::bool_&lt;false&gt; &gt;::call&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="677" width="0.0379%" height="15" fill="rgb(253,215,39)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="687.50"></text></g><g><title>bool boost::spirit::qi::sequence_base&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;::parse&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, boost::spirit::unused_type const&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="661" width="0.0379%" height="15" fill="rgb(221,220,41)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="671.50"></text></g><g><title>bool boost::spirit::qi::sequence_base&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt;::parse_impl&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, boost::spirit::unused_type const&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="645" width="0.0379%" height="15" fill="rgb(218,133,21)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="655.50"></text></g><g><title>bool boost::spirit::any_if&lt;boost::spirit::traits::attribute_not_unused&lt;boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt;, boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="629" width="0.0379%" height="15" fill="rgb(221,193,43)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="639.50"></text></g><g><title>bool boost::fusion::any&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt;, boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="613" width="0.0379%" height="15" fill="rgb(240,128,52)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="623.50"></text></g><g><title>bool boost::fusion::detail::any&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt;, boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt;, boost::fusion::forward_traversal_tag&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="597" width="0.0379%" height="15" fill="rgb(253,114,12)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="607.50"></text></g><g><title>bool boost::fusion::detail::linear_any&lt;boost::fusion::cons_iterator&lt;boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::cons&lt;boost::spirit::qi::kleene&lt;boost::spirit::qi::sequence&lt;boost::fusion::cons&lt;boost::spirit::qi::literal_string&lt;char const (&amp;) [4], true&gt;, boost::fusion::cons&lt;boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::phoenix::tag::construct, boost::proto::argsns_::list4&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::phoenix::detail::target&lt;Hardware::ExpressionTree&gt; &gt;, 0l&gt;, boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;Hardware::OperationType&gt;, 0l&gt;, boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 4l&gt; &gt; &gt;, 2l&gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; &gt; &gt;, boost::fusion::nil_&gt; &gt; const&gt;, boost::fusion::cons_iterator&lt;boost::fusion::nil_ const&gt;, boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="581" width="0.0379%" height="15" fill="rgb(215,223,47)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="591.50"></text></g><g><title>bool boost::spirit::qi::detail::fail_function&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt; &gt;::operator (1 samples, 0.04%)</title><rect x="74.8106%" y="565" width="0.0379%" height="15" fill="rgb(248,225,23)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="575.50"></text></g><g><title>bool boost::spirit::qi::action&lt;boost::spirit::qi::reference&lt;boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Hardware::ExpressionTree (), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt; const&gt;, boost::phoenix::actor&lt;boost::proto::exprns_::basic_expr&lt;boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2&lt;boost::phoenix::actor&lt;boost::spirit::attribute&lt;0&gt; &gt;, boost::phoenix::actor&lt;boost::spirit::argument&lt;0&gt; &gt; &gt;, 2l&gt; &gt; &gt;::parse&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, boost::spirit::context&lt;boost::fusion::cons&lt;Hardware::ExpressionTree&amp;, boost::fusion::nil_&gt;, boost::fusion::vector&lt;&gt; &gt;, boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::standard&gt; &gt;, boost::spirit::unused_type const&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="549" width="0.0379%" height="15" fill="rgb(250,108,0)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="559.50"></text></g><g><title>Hardware::ExpressionTree::~ExpressionTree (1 samples, 0.04%)</title><rect x="74.8106%" y="533" width="0.0379%" height="15" fill="rgb(228,208,7)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="543.50"></text></g><g><title>std::vector&lt;Hardware::ExpressionTree, std::allocator&lt;Hardware::ExpressionTree&gt; &gt;::~vector (1 samples, 0.04%)</title><rect x="74.8106%" y="517" width="0.0379%" height="15" fill="rgb(244,45,10)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="527.50"></text></g><g><title>void std::_Destroy&lt;Hardware::ExpressionTree*, Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="501" width="0.0379%" height="15" fill="rgb(207,125,25)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="511.50"></text></g><g><title>void std::_Destroy&lt;Hardware::ExpressionTree*&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="485" width="0.0379%" height="15" fill="rgb(210,195,18)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="495.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Hardware::ExpressionTree*&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="469" width="0.0379%" height="15" fill="rgb(249,80,12)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="479.50"></text></g><g><title>void std::_Destroy&lt;Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="453" width="0.0379%" height="15" fill="rgb(221,65,9)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="463.50"></text></g><g><title>Hardware::ExpressionTree::~ExpressionTree (1 samples, 0.04%)</title><rect x="74.8106%" y="437" width="0.0379%" height="15" fill="rgb(235,49,36)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="447.50"></text></g><g><title>std::vector&lt;Hardware::ExpressionTree, std::allocator&lt;Hardware::ExpressionTree&gt; &gt;::~vector (1 samples, 0.04%)</title><rect x="74.8106%" y="421" width="0.0379%" height="15" fill="rgb(225,32,20)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="431.50"></text></g><g><title>void std::_Destroy&lt;Hardware::ExpressionTree*, Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="405" width="0.0379%" height="15" fill="rgb(215,141,46)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="415.50"></text></g><g><title>void std::_Destroy&lt;Hardware::ExpressionTree*&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="389" width="0.0379%" height="15" fill="rgb(250,160,47)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="399.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Hardware::ExpressionTree*&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="373" width="0.0379%" height="15" fill="rgb(216,222,40)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="383.50"></text></g><g><title>void std::_Destroy&lt;Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="357" width="0.0379%" height="15" fill="rgb(234,217,39)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="367.50"></text></g><g><title>Hardware::ExpressionTree::~ExpressionTree (1 samples, 0.04%)</title><rect x="74.8106%" y="341" width="0.0379%" height="15" fill="rgb(207,178,40)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="351.50"></text></g><g><title>std::vector&lt;Hardware::ExpressionTree, std::allocator&lt;Hardware::ExpressionTree&gt; &gt;::~vector (1 samples, 0.04%)</title><rect x="74.8106%" y="325" width="0.0379%" height="15" fill="rgb(221,136,13)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="335.50"></text></g><g><title>void std::_Destroy&lt;Hardware::ExpressionTree*, Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="309" width="0.0379%" height="15" fill="rgb(249,199,10)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="319.50"></text></g><g><title>void std::_Destroy&lt;Hardware::ExpressionTree*&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="293" width="0.0379%" height="15" fill="rgb(249,222,13)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="303.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Hardware::ExpressionTree*&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="277" width="0.0379%" height="15" fill="rgb(244,185,38)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="287.50"></text></g><g><title>void std::_Destroy&lt;Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="261" width="0.0379%" height="15" fill="rgb(236,202,9)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="271.50"></text></g><g><title>Hardware::ExpressionTree::~ExpressionTree (1 samples, 0.04%)</title><rect x="74.8106%" y="245" width="0.0379%" height="15" fill="rgb(250,229,37)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="255.50"></text></g><g><title>std::vector&lt;Hardware::ExpressionTree, std::allocator&lt;Hardware::ExpressionTree&gt; &gt;::~vector (1 samples, 0.04%)</title><rect x="74.8106%" y="229" width="0.0379%" height="15" fill="rgb(206,174,23)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="239.50"></text></g><g><title>void std::_Destroy&lt;Hardware::ExpressionTree*, Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="213" width="0.0379%" height="15" fill="rgb(211,33,43)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="223.50"></text></g><g><title>void std::_Destroy&lt;Hardware::ExpressionTree*&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="197" width="0.0379%" height="15" fill="rgb(245,58,50)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="207.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Hardware::ExpressionTree*&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="181" width="0.0379%" height="15" fill="rgb(244,68,36)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="191.50"></text></g><g><title>void std::_Destroy&lt;Hardware::ExpressionTree&gt; (1 samples, 0.04%)</title><rect x="74.8106%" y="165" width="0.0379%" height="15" fill="rgb(232,229,15)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="175.50"></text></g><g><title>Hardware::ExpressionTree::~ExpressionTree (1 samples, 0.04%)</title><rect x="74.8106%" y="149" width="0.0379%" height="15" fill="rgb(254,30,23)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="159.50"></text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::~vector (1 samples, 0.04%)</title><rect x="74.8106%" y="133" width="0.0379%" height="15" fill="rgb(235,160,14)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="143.50"></text></g><g><title>std::_Vector_base&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::~_Vector_base (1 samples, 0.04%)</title><rect x="74.8106%" y="117" width="0.0379%" height="15" fill="rgb(212,155,44)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="127.50"></text></g><g><title>std::_Vector_base&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_deallocate (1 samples, 0.04%)</title><rect x="74.8106%" y="101" width="0.0379%" height="15" fill="rgb(226,2,50)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="111.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned int&gt; &gt;::deallocate (1 samples, 0.04%)</title><rect x="74.8106%" y="85" width="0.0379%" height="15" fill="rgb(234,177,6)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="95.50"></text></g><g><title>std::__new_allocator&lt;unsigned int&gt;::deallocate (1 samples, 0.04%)</title><rect x="74.8106%" y="69" width="0.0379%" height="15" fill="rgb(217,24,9)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="79.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="74.8106%" y="53" width="0.0379%" height="15" fill="rgb(220,13,46)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="63.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="74.8106%" y="37" width="0.0379%" height="15" fill="rgb(239,221,27)" fg:x="1975" fg:w="1"/><text x="75.0606%" y="47.50"></text></g><g><title>Hardware::Read::DesignFile (1 samples, 0.04%)</title><rect x="74.8485%" y="1333" width="0.0379%" height="15" fill="rgb(222,198,25)" fg:x="1976" fg:w="1"/><text x="75.0985%" y="1343.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="74.8485%" y="1317" width="0.0379%" height="15" fill="rgb(211,99,13)" fg:x="1976" fg:w="1"/><text x="75.0985%" y="1327.50"></text></g><g><title>Hardware::Read::DesignFile (2 samples, 0.08%)</title><rect x="74.8485%" y="1349" width="0.0758%" height="15" fill="rgb(232,111,31)" fg:x="1976" fg:w="2"/><text x="75.0985%" y="1359.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="74.8864%" y="1333" width="0.0379%" height="15" fill="rgb(245,82,37)" fg:x="1977" fg:w="1"/><text x="75.1364%" y="1343.50"></text></g><g><title>_int_malloc (1 samples, 0.04%)</title><rect x="74.8864%" y="1317" width="0.0379%" height="15" fill="rgb(227,149,46)" fg:x="1977" fg:w="1"/><text x="75.1364%" y="1327.50"></text></g><g><title>Fault::GetNotFaultProbability (4 samples, 0.15%)</title><rect x="75.1894%" y="1253" width="0.1515%" height="15" fill="rgb(218,36,50)" fg:x="1985" fg:w="4"/><text x="75.4394%" y="1263.50"></text></g><g><title>FaultSet::FaultSet (3 samples, 0.11%)</title><rect x="75.3409%" y="1253" width="0.1136%" height="15" fill="rgb(226,80,48)" fg:x="1989" fg:w="3"/><text x="75.5909%" y="1263.50"></text></g><g><title>std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::vector (3 samples, 0.11%)</title><rect x="75.3409%" y="1237" width="0.1136%" height="15" fill="rgb(238,224,15)" fg:x="1989" fg:w="3"/><text x="75.5909%" y="1247.50"></text></g><g><title>Fault const** std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**, Fault const*&gt; (3 samples, 0.11%)</title><rect x="75.3409%" y="1221" width="0.1136%" height="15" fill="rgb(241,136,10)" fg:x="1989" fg:w="3"/><text x="75.5909%" y="1231.50"></text></g><g><title>Fault const** std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (3 samples, 0.11%)</title><rect x="75.3409%" y="1205" width="0.1136%" height="15" fill="rgb(208,32,45)" fg:x="1989" fg:w="3"/><text x="75.5909%" y="1215.50"></text></g><g><title>Fault const** std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (3 samples, 0.11%)</title><rect x="75.3409%" y="1189" width="0.1136%" height="15" fill="rgb(207,135,9)" fg:x="1989" fg:w="3"/><text x="75.5909%" y="1199.50"></text></g><g><title>Fault const** std::copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (3 samples, 0.11%)</title><rect x="75.3409%" y="1173" width="0.1136%" height="15" fill="rgb(206,86,44)" fg:x="1989" fg:w="3"/><text x="75.5909%" y="1183.50"></text></g><g><title>Fault const** std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (3 samples, 0.11%)</title><rect x="75.3409%" y="1157" width="0.1136%" height="15" fill="rgb(245,177,15)" fg:x="1989" fg:w="3"/><text x="75.5909%" y="1167.50"></text></g><g><title>Fault const** std::__copy_move_a1&lt;false, Fault const* const*, Fault const**&gt; (3 samples, 0.11%)</title><rect x="75.3409%" y="1141" width="0.1136%" height="15" fill="rgb(206,64,50)" fg:x="1989" fg:w="3"/><text x="75.5909%" y="1151.50"></text></g><g><title>Fault const** std::__copy_move_a2&lt;false, Fault const* const*, Fault const**&gt; (3 samples, 0.11%)</title><rect x="75.3409%" y="1125" width="0.1136%" height="15" fill="rgb(234,36,40)" fg:x="1989" fg:w="3"/><text x="75.5909%" y="1135.50"></text></g><g><title>Fault const** std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;Fault const* const, Fault const*&gt; (3 samples, 0.11%)</title><rect x="75.3409%" y="1109" width="0.1136%" height="15" fill="rgb(213,64,8)" fg:x="1989" fg:w="3"/><text x="75.5909%" y="1119.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.11%)</title><rect x="75.3409%" y="1093" width="0.1136%" height="15" fill="rgb(210,75,36)" fg:x="1989" fg:w="3"/><text x="75.5909%" y="1103.50"></text></g><g><title>boost::random::detail::real_alias_table&lt;int, double&gt;::real_alias_table (2 samples, 0.08%)</title><rect x="75.4545%" y="1237" width="0.0758%" height="15" fill="rgb(229,88,21)" fg:x="1992" fg:w="2"/><text x="75.7045%" y="1247.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::vector (2 samples, 0.08%)</title><rect x="75.4545%" y="1221" width="0.0758%" height="15" fill="rgb(252,204,47)" fg:x="1992" fg:w="2"/><text x="75.7045%" y="1231.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_Vector_base (2 samples, 0.08%)</title><rect x="75.4545%" y="1205" width="0.0758%" height="15" fill="rgb(208,77,27)" fg:x="1992" fg:w="2"/><text x="75.7045%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_Vector_impl::_Vector_impl (2 samples, 0.08%)</title><rect x="75.4545%" y="1189" width="0.0758%" height="15" fill="rgb(221,76,26)" fg:x="1992" fg:w="2"/><text x="75.7045%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (2 samples, 0.08%)</title><rect x="75.4545%" y="1173" width="0.0758%" height="15" fill="rgb(225,139,18)" fg:x="1992" fg:w="2"/><text x="75.7045%" y="1183.50"></text></g><g><title>boost::random::detail::real_alias_table&lt;int, double&gt;::normalize (10 samples, 0.38%)</title><rect x="77.1212%" y="1205" width="0.3788%" height="15" fill="rgb(230,137,11)" fg:x="2036" fg:w="10"/><text x="77.3712%" y="1215.50"></text></g><g><title>double std::accumulate&lt;double const*, double&gt; (2 samples, 0.08%)</title><rect x="77.5758%" y="1189" width="0.0758%" height="15" fill="rgb(212,28,1)" fg:x="2048" fg:w="2"/><text x="77.8258%" y="1199.50"></text></g><g><title>malloc (13 samples, 0.49%)</title><rect x="78.7500%" y="1093" width="0.4924%" height="15" fill="rgb(248,164,17)" fg:x="2079" fg:w="13"/><text x="79.0000%" y="1103.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_allocate (20 samples, 0.76%)</title><rect x="78.5227%" y="1157" width="0.7576%" height="15" fill="rgb(222,171,42)" fg:x="2073" fg:w="20"/><text x="78.7727%" y="1167.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::allocate (20 samples, 0.76%)</title><rect x="78.5227%" y="1141" width="0.7576%" height="15" fill="rgb(243,84,45)" fg:x="2073" fg:w="20"/><text x="78.7727%" y="1151.50"></text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::allocate (20 samples, 0.76%)</title><rect x="78.5227%" y="1125" width="0.7576%" height="15" fill="rgb(252,49,23)" fg:x="2073" fg:w="20"/><text x="78.7727%" y="1135.50"></text></g><g><title>operator new (17 samples, 0.64%)</title><rect x="78.6364%" y="1109" width="0.6439%" height="15" fill="rgb(215,19,7)" fg:x="2076" fg:w="17"/><text x="78.8864%" y="1119.50"></text></g><g><title>malloc@plt (1 samples, 0.04%)</title><rect x="79.2424%" y="1093" width="0.0379%" height="15" fill="rgb(238,81,41)" fg:x="2092" fg:w="1"/><text x="79.4924%" y="1103.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_deallocate (2 samples, 0.08%)</title><rect x="79.2803%" y="1157" width="0.0758%" height="15" fill="rgb(210,199,37)" fg:x="2093" fg:w="2"/><text x="79.5303%" y="1167.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__uninitialized_default_n_a&lt;std::pair&lt;double, int&gt;*, unsigned long, std::pair&lt;double, int&gt; &gt; (7 samples, 0.27%)</title><rect x="79.3561%" y="1157" width="0.2652%" height="15" fill="rgb(244,192,49)" fg:x="2095" fg:w="7"/><text x="79.6061%" y="1167.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__uninitialized_default_n&lt;std::pair&lt;double, int&gt;*, unsigned long&gt; (7 samples, 0.27%)</title><rect x="79.3561%" y="1141" width="0.2652%" height="15" fill="rgb(226,211,11)" fg:x="2095" fg:w="7"/><text x="79.6061%" y="1151.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;std::pair&lt;double, int&gt;*, unsigned long&gt; (7 samples, 0.27%)</title><rect x="79.3561%" y="1125" width="0.2652%" height="15" fill="rgb(236,162,54)" fg:x="2095" fg:w="7"/><text x="79.6061%" y="1135.50"></text></g><g><title>void std::_Construct&lt;std::pair&lt;double, int&gt;&gt; (1 samples, 0.04%)</title><rect x="79.5833%" y="1109" width="0.0379%" height="15" fill="rgb(220,229,9)" fg:x="2101" fg:w="1"/><text x="79.8333%" y="1119.50"></text></g><g><title>std::pair&lt;double, int&gt;::pair&lt;double, int, true&gt; (1 samples, 0.04%)</title><rect x="79.5833%" y="1093" width="0.0379%" height="15" fill="rgb(250,87,22)" fg:x="2101" fg:w="1"/><text x="79.8333%" y="1103.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_check_len (4 samples, 0.15%)</title><rect x="79.6212%" y="1157" width="0.1515%" height="15" fill="rgb(239,43,17)" fg:x="2102" fg:w="4"/><text x="79.8712%" y="1167.50"></text></g><g><title>unsigned long const&amp; std::max&lt;unsigned long&gt; (1 samples, 0.04%)</title><rect x="79.7348%" y="1141" width="0.0379%" height="15" fill="rgb(231,177,25)" fg:x="2105" fg:w="1"/><text x="79.9848%" y="1151.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_S_relocate (3 samples, 0.11%)</title><rect x="79.7727%" y="1157" width="0.1136%" height="15" fill="rgb(219,179,1)" fg:x="2106" fg:w="3"/><text x="80.0227%" y="1167.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__relocate_a&lt;std::pair&lt;double, int&gt;*, std::pair&lt;double, int&gt;*, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt; (3 samples, 0.11%)</title><rect x="79.7727%" y="1141" width="0.1136%" height="15" fill="rgb(238,219,53)" fg:x="2106" fg:w="3"/><text x="80.0227%" y="1151.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__relocate_a_1&lt;std::pair&lt;double, int&gt;*, std::pair&lt;double, int&gt;*, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt; (3 samples, 0.11%)</title><rect x="79.7727%" y="1125" width="0.1136%" height="15" fill="rgb(232,167,36)" fg:x="2106" fg:w="3"/><text x="80.0227%" y="1135.50"></text></g><g><title>double boost::random::detail::real_alias_table&lt;int, double&gt;::init_average&lt;double const*&gt; (64 samples, 2.42%)</title><rect x="77.5000%" y="1205" width="2.4242%" height="15" fill="rgb(244,19,51)" fg:x="2046" fg:w="64"/><text x="77.7500%" y="1215.50">do..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::resize (60 samples, 2.27%)</title><rect x="77.6515%" y="1189" width="2.2727%" height="15" fill="rgb(224,6,22)" fg:x="2050" fg:w="60"/><text x="77.9015%" y="1199.50">s..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_default_append (58 samples, 2.20%)</title><rect x="77.7273%" y="1173" width="2.1970%" height="15" fill="rgb(224,145,5)" fg:x="2052" fg:w="58"/><text x="77.9773%" y="1183.50">s..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::size (1 samples, 0.04%)</title><rect x="79.8864%" y="1157" width="0.0379%" height="15" fill="rgb(234,130,49)" fg:x="2109" fg:w="1"/><text x="80.1364%" y="1167.50"></text></g><g><title>std::pair&lt;double, int&gt;::operator= (13 samples, 0.49%)</title><rect x="79.9242%" y="1205" width="0.4924%" height="15" fill="rgb(254,6,2)" fg:x="2110" fg:w="13"/><text x="80.1742%" y="1215.50"></text></g><g><title>std::pair&lt;double, int&gt;::pair&lt;double&amp;, int, true&gt; (1 samples, 0.04%)</title><rect x="80.4167%" y="1205" width="0.0379%" height="15" fill="rgb(208,96,46)" fg:x="2123" fg:w="1"/><text x="80.6667%" y="1215.50"></text></g><g><title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;double&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;int&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;double&amp;, int&amp;&gt; (2 samples, 0.08%)</title><rect x="80.4545%" y="1205" width="0.0758%" height="15" fill="rgb(239,3,39)" fg:x="2124" fg:w="2"/><text x="80.7045%" y="1215.50"></text></g><g><title>std::pair&lt;double, int&gt;::pair&lt;double&amp;, int&amp;, true&gt; (2 samples, 0.08%)</title><rect x="80.4545%" y="1189" width="0.0758%" height="15" fill="rgb(233,210,1)" fg:x="2124" fg:w="2"/><text x="80.7045%" y="1199.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::begin (4 samples, 0.15%)</title><rect x="80.5303%" y="1205" width="0.1515%" height="15" fill="rgb(244,137,37)" fg:x="2126" fg:w="4"/><text x="80.7803%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;double, int&gt;*, std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt; &gt;::__normal_iterator (4 samples, 0.15%)</title><rect x="80.5303%" y="1189" width="0.1515%" height="15" fill="rgb(240,136,2)" fg:x="2126" fg:w="4"/><text x="80.7803%" y="1199.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::operator[] (3 samples, 0.11%)</title><rect x="80.6818%" y="1205" width="0.1136%" height="15" fill="rgb(239,18,37)" fg:x="2130" fg:w="3"/><text x="80.9318%" y="1215.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::push_back (68 samples, 2.58%)</title><rect x="80.7955%" y="1205" width="2.5758%" height="15" fill="rgb(218,185,22)" fg:x="2133" fg:w="68"/><text x="81.0455%" y="1215.50">st..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::construct&lt;std::pair&lt;double, int&gt;, std::pair&lt;double, int&gt; const&amp;&gt; (59 samples, 2.23%)</title><rect x="81.1364%" y="1189" width="2.2348%" height="15" fill="rgb(225,218,4)" fg:x="2142" fg:w="59"/><text x="81.3864%" y="1199.50">v..</text></g><g><title>void std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::construct&lt;std::pair&lt;double, int&gt;, std::pair&lt;double, int&gt; const&amp;&gt; (59 samples, 2.23%)</title><rect x="81.1364%" y="1173" width="2.2348%" height="15" fill="rgb(230,182,32)" fg:x="2142" fg:w="59"/><text x="81.3864%" y="1183.50">v..</text></g><g><title>malloc (42 samples, 1.59%)</title><rect x="85.1515%" y="1125" width="1.5909%" height="15" fill="rgb(242,56,43)" fg:x="2248" fg:w="42"/><text x="85.4015%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_allocate (62 samples, 2.35%)</title><rect x="84.5455%" y="1189" width="2.3485%" height="15" fill="rgb(233,99,24)" fg:x="2232" fg:w="62"/><text x="84.7955%" y="1199.50">s..</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::allocate (62 samples, 2.35%)</title><rect x="84.5455%" y="1173" width="2.3485%" height="15" fill="rgb(234,209,42)" fg:x="2232" fg:w="62"/><text x="84.7955%" y="1183.50">s..</text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::allocate (62 samples, 2.35%)</title><rect x="84.5455%" y="1157" width="2.3485%" height="15" fill="rgb(227,7,12)" fg:x="2232" fg:w="62"/><text x="84.7955%" y="1167.50">s..</text></g><g><title>operator new (58 samples, 2.20%)</title><rect x="84.6970%" y="1141" width="2.1970%" height="15" fill="rgb(245,203,43)" fg:x="2236" fg:w="58"/><text x="84.9470%" y="1151.50">o..</text></g><g><title>malloc@plt (4 samples, 0.15%)</title><rect x="86.7424%" y="1125" width="0.1515%" height="15" fill="rgb(238,205,33)" fg:x="2290" fg:w="4"/><text x="86.9924%" y="1135.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_deallocate (5 samples, 0.19%)</title><rect x="86.8939%" y="1189" width="0.1894%" height="15" fill="rgb(231,56,7)" fg:x="2294" fg:w="5"/><text x="87.1439%" y="1199.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_S_relocate (4 samples, 0.15%)</title><rect x="87.0833%" y="1189" width="0.1515%" height="15" fill="rgb(244,186,29)" fg:x="2299" fg:w="4"/><text x="87.3333%" y="1199.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__relocate_a&lt;std::pair&lt;double, int&gt;*, std::pair&lt;double, int&gt;*, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt; (4 samples, 0.15%)</title><rect x="87.0833%" y="1173" width="0.1515%" height="15" fill="rgb(234,111,31)" fg:x="2299" fg:w="4"/><text x="87.3333%" y="1183.50"></text></g><g><title>std::pair&lt;double, int&gt;* std::__relocate_a_1&lt;std::pair&lt;double, int&gt;*, std::pair&lt;double, int&gt;*, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt; (4 samples, 0.15%)</title><rect x="87.0833%" y="1157" width="0.1515%" height="15" fill="rgb(241,149,10)" fg:x="2299" fg:w="4"/><text x="87.3333%" y="1167.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::capacity (7 samples, 0.27%)</title><rect x="87.2348%" y="1189" width="0.2652%" height="15" fill="rgb(249,206,44)" fg:x="2303" fg:w="7"/><text x="87.4848%" y="1199.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::reserve (110 samples, 4.17%)</title><rect x="83.3712%" y="1205" width="4.1667%" height="15" fill="rgb(251,153,30)" fg:x="2201" fg:w="110"/><text x="83.6212%" y="1215.50">std::..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::size (1 samples, 0.04%)</title><rect x="87.5000%" y="1189" width="0.0379%" height="15" fill="rgb(239,152,38)" fg:x="2310" fg:w="1"/><text x="87.7500%" y="1199.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::vector (5 samples, 0.19%)</title><rect x="87.5379%" y="1205" width="0.1894%" height="15" fill="rgb(249,139,47)" fg:x="2311" fg:w="5"/><text x="87.7879%" y="1215.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_Vector_base (5 samples, 0.19%)</title><rect x="87.5379%" y="1189" width="0.1894%" height="15" fill="rgb(244,64,35)" fg:x="2311" fg:w="5"/><text x="87.7879%" y="1199.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_Vector_impl::_Vector_impl (5 samples, 0.19%)</title><rect x="87.5379%" y="1173" width="0.1894%" height="15" fill="rgb(216,46,15)" fg:x="2311" fg:w="5"/><text x="87.7879%" y="1183.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (5 samples, 0.19%)</title><rect x="87.5379%" y="1157" width="0.1894%" height="15" fill="rgb(250,74,19)" fg:x="2311" fg:w="5"/><text x="87.7879%" y="1167.50"></text></g><g><title>cfree@GLIBC_2.2.5 (78 samples, 2.95%)</title><rect x="87.8788%" y="1125" width="2.9545%" height="15" fill="rgb(249,42,33)" fg:x="2320" fg:w="78"/><text x="88.1288%" y="1135.50">cfr..</text></g><g><title>_int_free (59 samples, 2.23%)</title><rect x="88.5985%" y="1109" width="2.2348%" height="15" fill="rgb(242,149,17)" fg:x="2339" fg:w="59"/><text x="88.8485%" y="1119.50">_..</text></g><g><title>boost::random::discrete_distribution&lt;int, double&gt;::discrete_distribution&lt;double [2]&gt; (415 samples, 15.72%)</title><rect x="75.4545%" y="1253" width="15.7197%" height="15" fill="rgb(244,29,21)" fg:x="1992" fg:w="415"/><text x="75.7045%" y="1263.50">boost::random::discrete_..</text></g><g><title>void boost::random::discrete_distribution&lt;int, double&gt;::init&lt;double const*&gt; (413 samples, 15.64%)</title><rect x="75.5303%" y="1237" width="15.6439%" height="15" fill="rgb(220,130,37)" fg:x="1994" fg:w="413"/><text x="75.7803%" y="1247.50">void boost::random::disc..</text></g><g><title>void boost::random::discrete_distribution&lt;int, double&gt;::init&lt;double const*&gt; (413 samples, 15.64%)</title><rect x="75.5303%" y="1221" width="15.6439%" height="15" fill="rgb(211,67,2)" fg:x="1994" fg:w="413"/><text x="75.7803%" y="1231.50">void boost::random::disc..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::~vector (91 samples, 3.45%)</title><rect x="87.7273%" y="1205" width="3.4470%" height="15" fill="rgb(235,68,52)" fg:x="2316" fg:w="91"/><text x="87.9773%" y="1215.50">std..</text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::~_Vector_base (91 samples, 3.45%)</title><rect x="87.7273%" y="1189" width="3.4470%" height="15" fill="rgb(246,142,3)" fg:x="2316" fg:w="91"/><text x="87.9773%" y="1199.50">std..</text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_deallocate (88 samples, 3.33%)</title><rect x="87.8409%" y="1173" width="3.3333%" height="15" fill="rgb(241,25,7)" fg:x="2319" fg:w="88"/><text x="88.0909%" y="1183.50">std..</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::deallocate (87 samples, 3.30%)</title><rect x="87.8788%" y="1157" width="3.2955%" height="15" fill="rgb(242,119,39)" fg:x="2320" fg:w="87"/><text x="88.1288%" y="1167.50">std..</text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::deallocate (87 samples, 3.30%)</title><rect x="87.8788%" y="1141" width="3.2955%" height="15" fill="rgb(241,98,45)" fg:x="2320" fg:w="87"/><text x="88.1288%" y="1151.50">std..</text></g><g><title>operator delete (9 samples, 0.34%)</title><rect x="90.8333%" y="1125" width="0.3409%" height="15" fill="rgb(254,28,30)" fg:x="2398" fg:w="9"/><text x="91.0833%" y="1135.50"></text></g><g><title>cfree@GLIBC_2.2.5 (32 samples, 1.21%)</title><rect x="91.6288%" y="1141" width="1.2121%" height="15" fill="rgb(241,142,54)" fg:x="2419" fg:w="32"/><text x="91.8788%" y="1151.50"></text></g><g><title>_int_free (25 samples, 0.95%)</title><rect x="91.8939%" y="1125" width="0.9470%" height="15" fill="rgb(222,85,15)" fg:x="2426" fg:w="25"/><text x="92.1439%" y="1135.50"></text></g><g><title>free@plt (2 samples, 0.08%)</title><rect x="92.8409%" y="1141" width="0.0758%" height="15" fill="rgb(210,85,47)" fg:x="2451" fg:w="2"/><text x="93.0909%" y="1151.50"></text></g><g><title>boost::random::discrete_distribution&lt;int, double&gt;::~discrete_distribution (50 samples, 1.89%)</title><rect x="91.1742%" y="1253" width="1.8939%" height="15" fill="rgb(224,206,25)" fg:x="2407" fg:w="50"/><text x="91.4242%" y="1263.50">b..</text></g><g><title>boost::random::detail::real_alias_table&lt;int, double&gt;::~real_alias_table (50 samples, 1.89%)</title><rect x="91.1742%" y="1237" width="1.8939%" height="15" fill="rgb(243,201,19)" fg:x="2407" fg:w="50"/><text x="91.4242%" y="1247.50">b..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::~vector (50 samples, 1.89%)</title><rect x="91.1742%" y="1221" width="1.8939%" height="15" fill="rgb(236,59,4)" fg:x="2407" fg:w="50"/><text x="91.4242%" y="1231.50">s..</text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::~_Vector_base (50 samples, 1.89%)</title><rect x="91.1742%" y="1205" width="1.8939%" height="15" fill="rgb(254,179,45)" fg:x="2407" fg:w="50"/><text x="91.4242%" y="1215.50">s..</text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_deallocate (49 samples, 1.86%)</title><rect x="91.2121%" y="1189" width="1.8561%" height="15" fill="rgb(226,14,10)" fg:x="2408" fg:w="49"/><text x="91.4621%" y="1199.50">s..</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::deallocate (42 samples, 1.59%)</title><rect x="91.4773%" y="1173" width="1.5909%" height="15" fill="rgb(244,27,41)" fg:x="2415" fg:w="42"/><text x="91.7273%" y="1183.50"></text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::deallocate (42 samples, 1.59%)</title><rect x="91.4773%" y="1157" width="1.5909%" height="15" fill="rgb(235,35,32)" fg:x="2415" fg:w="42"/><text x="91.7273%" y="1167.50"></text></g><g><title>operator delete (4 samples, 0.15%)</title><rect x="92.9167%" y="1141" width="0.1515%" height="15" fill="rgb(218,68,31)" fg:x="2453" fg:w="4"/><text x="93.1667%" y="1151.50"></text></g><g><title>boost::random::discrete_distribution&lt;int, double&gt;::max (5 samples, 0.19%)</title><rect x="93.5227%" y="1237" width="0.1894%" height="15" fill="rgb(207,120,37)" fg:x="2469" fg:w="5"/><text x="93.7727%" y="1247.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::size (5 samples, 0.19%)</title><rect x="93.5227%" y="1221" width="0.1894%" height="15" fill="rgb(227,98,0)" fg:x="2469" fg:w="5"/><text x="93.7727%" y="1231.50"></text></g><g><title>boost::random::uniform_int_distribution&lt;int&gt;::uniform_int_distribution (1 samples, 0.04%)</title><rect x="93.7121%" y="1237" width="0.0379%" height="15" fill="rgb(207,7,3)" fg:x="2474" fg:w="1"/><text x="93.9621%" y="1247.50"></text></g><g><title>double boost::random::detail::real_alias_table&lt;int, double&gt;::test&lt;boost::random::mersenne_twister_engine&lt;unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u&gt; &gt; (12 samples, 0.45%)</title><rect x="93.7500%" y="1237" width="0.4545%" height="15" fill="rgb(206,98,19)" fg:x="2475" fg:w="12"/><text x="94.0000%" y="1247.50"></text></g><g><title>double boost::random::detail::new_uniform_01&lt;double&gt;::operator (12 samples, 0.45%)</title><rect x="93.7500%" y="1221" width="0.4545%" height="15" fill="rgb(217,5,26)" fg:x="2475" fg:w="12"/><text x="94.0000%" y="1231.50"></text></g><g><title>boost::random::mersenne_twister_engine&lt;unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u&gt;::operator (9 samples, 0.34%)</title><rect x="93.8636%" y="1205" width="0.3409%" height="15" fill="rgb(235,190,38)" fg:x="2478" fg:w="9"/><text x="94.1136%" y="1215.50"></text></g><g><title>boost::random::detail::add&lt;unsigned int, int, true&gt;::operator (2 samples, 0.08%)</title><rect x="94.5833%" y="1189" width="0.0758%" height="15" fill="rgb(247,86,24)" fg:x="2497" fg:w="2"/><text x="94.8333%" y="1199.50"></text></g><g><title>int boost::random::uniform_int_distribution&lt;int&gt;::operator (35 samples, 1.33%)</title><rect x="94.2045%" y="1237" width="1.3258%" height="15" fill="rgb(205,101,16)" fg:x="2487" fg:w="35"/><text x="94.4545%" y="1247.50"></text></g><g><title>int boost::random::detail::generate_uniform_int&lt;boost::random::mersenne_twister_engine&lt;unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u&gt;, int&gt; (35 samples, 1.33%)</title><rect x="94.2045%" y="1221" width="1.3258%" height="15" fill="rgb(246,168,33)" fg:x="2487" fg:w="35"/><text x="94.4545%" y="1231.50"></text></g><g><title>int boost::random::detail::generate_uniform_int&lt;boost::random::mersenne_twister_engine&lt;unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u&gt;, int&gt; (35 samples, 1.33%)</title><rect x="94.2045%" y="1205" width="1.3258%" height="15" fill="rgb(231,114,1)" fg:x="2487" fg:w="35"/><text x="94.4545%" y="1215.50"></text></g><g><title>boost::random::mersenne_twister_engine&lt;unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u&gt;::operator (23 samples, 0.87%)</title><rect x="94.6591%" y="1189" width="0.8712%" height="15" fill="rgb(207,184,53)" fg:x="2499" fg:w="23"/><text x="94.9091%" y="1199.50"></text></g><g><title>boost::random::mersenne_twister_engine&lt;unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u&gt;::twist (12 samples, 0.45%)</title><rect x="95.0758%" y="1173" width="0.4545%" height="15" fill="rgb(224,95,51)" fg:x="2510" fg:w="12"/><text x="95.3258%" y="1183.50"></text></g><g><title>int boost::random::discrete_distribution&lt;int, double&gt;::operator (68 samples, 2.58%)</title><rect x="93.0682%" y="1253" width="2.5758%" height="15" fill="rgb(212,188,45)" fg:x="2457" fg:w="68"/><text x="93.3182%" y="1263.50">in..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::operator[] (3 samples, 0.11%)</title><rect x="95.5303%" y="1237" width="0.1136%" height="15" fill="rgb(223,154,38)" fg:x="2522" fg:w="3"/><text x="95.7803%" y="1247.50"></text></g><g><title>std::unique_ptr&lt;Fault const, std::default_delete&lt;Fault const&gt; &gt;::get (4 samples, 0.15%)</title><rect x="95.6439%" y="1253" width="0.1515%" height="15" fill="rgb(251,22,52)" fg:x="2525" fg:w="4"/><text x="95.8939%" y="1263.50"></text></g><g><title>std::__uniq_ptr_impl&lt;Fault const, std::default_delete&lt;Fault const&gt; &gt;::_M_ptr (4 samples, 0.15%)</title><rect x="95.6439%" y="1237" width="0.1515%" height="15" fill="rgb(229,209,22)" fg:x="2525" fg:w="4"/><text x="95.8939%" y="1247.50"></text></g><g><title>FaultManager::SampleRandomFault (552 samples, 20.91%)</title><rect x="74.9242%" y="1269" width="20.9091%" height="15" fill="rgb(234,138,34)" fg:x="1978" fg:w="552"/><text x="75.1742%" y="1279.50">FaultManager::SampleRandomFault</text></g><g><title>std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::push_back (1 samples, 0.04%)</title><rect x="95.7955%" y="1253" width="0.0379%" height="15" fill="rgb(212,95,11)" fg:x="2529" fg:w="1"/><text x="96.0455%" y="1263.50"></text></g><g><title>Fault const*&amp; std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::emplace_back&lt;Fault const*&gt; (1 samples, 0.04%)</title><rect x="95.7955%" y="1237" width="0.0379%" height="15" fill="rgb(240,179,47)" fg:x="2529" fg:w="1"/><text x="96.0455%" y="1247.50"></text></g><g><title>void std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::_M_realloc_insert&lt;Fault const*&gt; (1 samples, 0.04%)</title><rect x="95.7955%" y="1221" width="0.0379%" height="15" fill="rgb(240,163,11)" fg:x="2529" fg:w="1"/><text x="96.0455%" y="1231.50"></text></g><g><title>std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::_S_relocate (1 samples, 0.04%)</title><rect x="95.7955%" y="1205" width="0.0379%" height="15" fill="rgb(236,37,12)" fg:x="2529" fg:w="1"/><text x="96.0455%" y="1215.50"></text></g><g><title>Fault const** std::__relocate_a&lt;Fault const**, Fault const**, std::allocator&lt;Fault const*&gt; &gt; (1 samples, 0.04%)</title><rect x="95.7955%" y="1189" width="0.0379%" height="15" fill="rgb(232,164,16)" fg:x="2529" fg:w="1"/><text x="96.0455%" y="1199.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;Fault const*, void&gt;::value, Fault const**&gt;::type std::__relocate_a_1&lt;Fault const*, Fault const*&gt; (1 samples, 0.04%)</title><rect x="95.7955%" y="1173" width="0.0379%" height="15" fill="rgb(244,205,15)" fg:x="2529" fg:w="1"/><text x="96.0455%" y="1183.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="95.7955%" y="1157" width="0.0379%" height="15" fill="rgb(223,117,47)" fg:x="2529" fg:w="1"/><text x="96.0455%" y="1167.50"></text></g><g><title>FaultSet&amp; std::vector&lt;FaultSet, std::allocator&lt;FaultSet&gt; &gt;::emplace_back&lt;FaultSet&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1269" width="0.0758%" height="15" fill="rgb(244,107,35)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1279.50"></text></g><g><title>void std::vector&lt;FaultSet, std::allocator&lt;FaultSet&gt; &gt;::_M_realloc_insert&lt;FaultSet&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1253" width="0.0758%" height="15" fill="rgb(205,140,8)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1263.50"></text></g><g><title>FaultSet* std::__uninitialized_move_if_noexcept_a&lt;FaultSet*, FaultSet*, std::allocator&lt;FaultSet&gt; &gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1237" width="0.0758%" height="15" fill="rgb(228,84,46)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1247.50"></text></g><g><title>FaultSet* std::__uninitialized_copy_a&lt;FaultSet const*, FaultSet*, FaultSet&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1221" width="0.0758%" height="15" fill="rgb(254,188,9)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1231.50"></text></g><g><title>FaultSet* std::uninitialized_copy&lt;FaultSet const*, FaultSet*&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1205" width="0.0758%" height="15" fill="rgb(206,112,54)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1215.50"></text></g><g><title>FaultSet* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;FaultSet const*, FaultSet*&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1189" width="0.0758%" height="15" fill="rgb(216,84,49)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1199.50"></text></g><g><title>FaultSet* std::__do_uninit_copy&lt;FaultSet const*, FaultSet*&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1173" width="0.0758%" height="15" fill="rgb(214,194,35)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1183.50"></text></g><g><title>void std::_Construct&lt;FaultSet, FaultSet const&amp;&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1157" width="0.0758%" height="15" fill="rgb(249,28,3)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1167.50"></text></g><g><title>FaultSet::FaultSet (2 samples, 0.08%)</title><rect x="95.8333%" y="1141" width="0.0758%" height="15" fill="rgb(222,56,52)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1151.50"></text></g><g><title>std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt;::vector (2 samples, 0.08%)</title><rect x="95.8333%" y="1125" width="0.0758%" height="15" fill="rgb(245,217,50)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1135.50"></text></g><g><title>Fault const** std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**, Fault const*&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1109" width="0.0758%" height="15" fill="rgb(213,201,24)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1119.50"></text></g><g><title>Fault const** std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1093" width="0.0758%" height="15" fill="rgb(248,116,28)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1103.50"></text></g><g><title>Fault const** std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1077" width="0.0758%" height="15" fill="rgb(219,72,43)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1087.50"></text></g><g><title>Fault const** std::copy&lt;__gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1061" width="0.0758%" height="15" fill="rgb(209,138,14)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1071.50"></text></g><g><title>Fault const** std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;Fault const* const*, std::vector&lt;Fault const*, std::allocator&lt;Fault const*&gt; &gt; &gt;, Fault const**&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1045" width="0.0758%" height="15" fill="rgb(222,18,33)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1055.50"></text></g><g><title>Fault const** std::__copy_move_a1&lt;false, Fault const* const*, Fault const**&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1029" width="0.0758%" height="15" fill="rgb(213,199,7)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1039.50"></text></g><g><title>Fault const** std::__copy_move_a2&lt;false, Fault const* const*, Fault const**&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="1013" width="0.0758%" height="15" fill="rgb(250,110,10)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1023.50"></text></g><g><title>Fault const** std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;Fault const* const, Fault const*&gt; (2 samples, 0.08%)</title><rect x="95.8333%" y="997" width="0.0758%" height="15" fill="rgb(248,123,6)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="1007.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.08%)</title><rect x="95.8333%" y="981" width="0.0758%" height="15" fill="rgb(206,91,31)" fg:x="2530" fg:w="2"/><text x="96.0833%" y="991.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_default_append (1 samples, 0.04%)</title><rect x="95.9091%" y="1269" width="0.0379%" height="15" fill="rgb(211,154,13)" fg:x="2532" fg:w="1"/><text x="96.1591%" y="1279.50"></text></g><g><title>Hardware::Execute (559 samples, 21.17%)</title><rect x="74.8106%" y="1365" width="21.1742%" height="15" fill="rgb(225,148,7)" fg:x="1975" fg:w="559"/><text x="75.0606%" y="1375.50">Hardware::Execute</text></g><g><title>SampledRFAdversary::EvaluateRandomFaultAdversary (556 samples, 21.06%)</title><rect x="74.9242%" y="1349" width="21.0606%" height="15" fill="rgb(220,160,43)" fg:x="1978" fg:w="556"/><text x="75.1742%" y="1359.50">SampledRFAdversary::EvaluateRando..</text></g><g><title>SampledRFAdversary::MultithreadedAnalysis (556 samples, 21.06%)</title><rect x="74.9242%" y="1333" width="21.0606%" height="15" fill="rgb(213,52,39)" fg:x="1978" fg:w="556"/><text x="75.1742%" y="1343.50">SampledRFAdversary::Multithreaded..</text></g><g><title>GOMP_parallel (556 samples, 21.06%)</title><rect x="74.9242%" y="1317" width="21.0606%" height="15" fill="rgb(243,137,7)" fg:x="1978" fg:w="556"/><text x="75.1742%" y="1327.50">GOMP_parallel</text></g><g><title>SampledRFAdversary::MultithreadedAnalysis (556 samples, 21.06%)</title><rect x="74.9242%" y="1301" width="21.0606%" height="15" fill="rgb(230,79,13)" fg:x="1978" fg:w="556"/><text x="75.1742%" y="1311.50">SampledRFAdversary::Multithreaded..</text></g><g><title>FaultManager::SampleRandomFaultVector (556 samples, 21.06%)</title><rect x="74.9242%" y="1285" width="21.0606%" height="15" fill="rgb(247,105,23)" fg:x="1978" fg:w="556"/><text x="75.1742%" y="1295.50">FaultManager::SampleRandomFaultVe..</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::reserve (1 samples, 0.04%)</title><rect x="95.9470%" y="1269" width="0.0379%" height="15" fill="rgb(223,179,41)" fg:x="2533" fg:w="1"/><text x="96.1970%" y="1279.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (560 samples, 21.21%)</title><rect x="74.8106%" y="1413" width="21.2121%" height="15" fill="rgb(218,9,34)" fg:x="1975" fg:w="560"/><text x="75.0606%" y="1423.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (560 samples, 21.21%)</title><rect x="74.8106%" y="1397" width="21.2121%" height="15" fill="rgb(222,106,8)" fg:x="1975" fg:w="560"/><text x="75.0606%" y="1407.50">__libc_start_call_main</text></g><g><title>main (560 samples, 21.21%)</title><rect x="74.8106%" y="1381" width="21.2121%" height="15" fill="rgb(211,220,0)" fg:x="1975" fg:w="560"/><text x="75.0606%" y="1391.50">main</text></g><g><title>ProgramOptions::Parse (1 samples, 0.04%)</title><rect x="95.9848%" y="1365" width="0.0379%" height="15" fill="rgb(229,52,16)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1375.50"></text></g><g><title>boost::program_options::variables_map::notify (1 samples, 0.04%)</title><rect x="95.9848%" y="1349" width="0.0379%" height="15" fill="rgb(212,155,18)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1359.50"></text></g><g><title>ValidateJson (1 samples, 0.04%)</title><rect x="95.9848%" y="1333" width="0.0379%" height="15" fill="rgb(242,21,14)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1343.50"></text></g><g><title>void boost::property_tree::json_parser::read_json&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="95.9848%" y="1317" width="0.0379%" height="15" fill="rgb(222,19,48)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1327.50"></text></g><g><title>void boost::property_tree::json_parser::detail::read_json_internal&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="95.9848%" y="1301" width="0.0379%" height="15" fill="rgb(232,45,27)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1311.50"></text></g><g><title>void boost::property_tree::json_parser::detail::read_json_internal&lt;std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, boost::property_tree::json_parser::detail::encoding&lt;char&gt;, boost::property_tree::json_parser::detail::standard_callbacks&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.04%)</title><rect x="95.9848%" y="1285" width="0.0379%" height="15" fill="rgb(249,103,42)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1295.50"></text></g><g><title>boost::property_tree::json_parser::detail::parser&lt;boost::property_tree::json_parser::detail::standard_callbacks&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, boost::property_tree::json_parser::detail::encoding&lt;char&gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::parse_value (1 samples, 0.04%)</title><rect x="95.9848%" y="1269" width="0.0379%" height="15" fill="rgb(246,81,33)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1279.50"></text></g><g><title>boost::property_tree::json_parser::detail::parser&lt;boost::property_tree::json_parser::detail::standard_callbacks&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, boost::property_tree::json_parser::detail::encoding&lt;char&gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::parse_object (1 samples, 0.04%)</title><rect x="95.9848%" y="1253" width="0.0379%" height="15" fill="rgb(252,33,42)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1263.50"></text></g><g><title>boost::property_tree::json_parser::detail::parser&lt;boost::property_tree::json_parser::detail::standard_callbacks&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, boost::property_tree::json_parser::detail::encoding&lt;char&gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::parse_value (1 samples, 0.04%)</title><rect x="95.9848%" y="1237" width="0.0379%" height="15" fill="rgb(209,212,41)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1247.50"></text></g><g><title>boost::property_tree::json_parser::detail::parser&lt;boost::property_tree::json_parser::detail::standard_callbacks&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, boost::property_tree::json_parser::detail::encoding&lt;char&gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::parse_object (1 samples, 0.04%)</title><rect x="95.9848%" y="1221" width="0.0379%" height="15" fill="rgb(207,154,6)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1231.50"></text></g><g><title>boost::property_tree::json_parser::detail::parser&lt;boost::property_tree::json_parser::detail::standard_callbacks&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, boost::property_tree::json_parser::detail::encoding&lt;char&gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::parse_value (1 samples, 0.04%)</title><rect x="95.9848%" y="1205" width="0.0379%" height="15" fill="rgb(223,64,47)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1215.50"></text></g><g><title>boost::property_tree::json_parser::detail::parser&lt;boost::property_tree::json_parser::detail::standard_callbacks&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, boost::property_tree::json_parser::detail::encoding&lt;char&gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::parse_string (1 samples, 0.04%)</title><rect x="95.9848%" y="1189" width="0.0379%" height="15" fill="rgb(211,161,38)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1199.50"></text></g><g><title>boost::property_tree::json_parser::detail::standard_callbacks&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::on_begin_string (1 samples, 0.04%)</title><rect x="95.9848%" y="1173" width="0.0379%" height="15" fill="rgb(219,138,40)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1183.50"></text></g><g><title>boost::property_tree::json_parser::detail::standard_callbacks&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::new_value (1 samples, 0.04%)</title><rect x="95.9848%" y="1157" width="0.0379%" height="15" fill="rgb(241,228,46)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1167.50"></text></g><g><title>boost::property_tree::json_parser::detail::standard_callbacks&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::new_tree (1 samples, 0.04%)</title><rect x="95.9848%" y="1141" width="0.0379%" height="15" fill="rgb(223,209,38)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1151.50"></text></g><g><title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, true&gt; (1 samples, 0.04%)</title><rect x="95.9848%" y="1125" width="0.0379%" height="15" fill="rgb(236,164,45)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1135.50"></text></g><g><title>boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::basic_ptree (1 samples, 0.04%)</title><rect x="95.9848%" y="1109" width="0.0379%" height="15" fill="rgb(231,15,5)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1119.50"></text></g><g><title>boost::multi_index::multi_index_container&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, boost::multi_index::indexed_by&lt;boost::multi_index::sequenced&lt;boost::multi_index::tag&lt;mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt; &gt;, boost::multi_index::ordered_non_unique&lt;boost::multi_index::tag&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::subs::by_name, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, boost::multi_index::member&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, &amp;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::first&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::multi_index_container (1 samples, 0.04%)</title><rect x="95.9848%" y="1093" width="0.0379%" height="15" fill="rgb(252,35,15)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1103.50"></text></g><g><title>boost::multi_index::detail::header_holder&lt;boost::multi_index::detail::sequenced_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;*, boost::multi_index::multi_index_container&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, boost::multi_index::indexed_by&lt;boost::multi_index::sequenced&lt;boost::multi_index::tag&lt;mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt; &gt;, boost::multi_index::ordered_non_unique&lt;boost::multi_index::tag&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::subs::by_name, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, boost::multi_index::member&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, &amp;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::first&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::header_holder (1 samples, 0.04%)</title><rect x="95.9848%" y="1077" width="0.0379%" height="15" fill="rgb(248,181,18)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1087.50"></text></g><g><title>boost::multi_index::multi_index_container&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, boost::multi_index::indexed_by&lt;boost::multi_index::sequenced&lt;boost::multi_index::tag&lt;mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt; &gt;, boost::multi_index::ordered_non_unique&lt;boost::multi_index::tag&lt;boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::subs::by_name, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, boost::multi_index::member&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, &amp;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::first&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::allocate_node (1 samples, 0.04%)</title><rect x="95.9848%" y="1061" width="0.0379%" height="15" fill="rgb(233,39,42)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1071.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;boost::multi_index::detail::sequenced_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::allocate (1 samples, 0.04%)</title><rect x="95.9848%" y="1045" width="0.0379%" height="15" fill="rgb(238,110,33)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1055.50"></text></g><g><title>std::__new_allocator&lt;boost::multi_index::detail::sequenced_index_node&lt;boost::multi_index::detail::ordered_index_node&lt;boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, boost::property_tree::basic_ptree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::allocate (1 samples, 0.04%)</title><rect x="95.9848%" y="1029" width="0.0379%" height="15" fill="rgb(233,195,10)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1039.50"></text></g><g><title>operator new (1 samples, 0.04%)</title><rect x="95.9848%" y="1013" width="0.0379%" height="15" fill="rgb(254,105,3)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1023.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="95.9848%" y="997" width="0.0379%" height="15" fill="rgb(221,225,9)" fg:x="2534" fg:w="1"/><text x="96.2348%" y="1007.50"></text></g><g><title>_start (564 samples, 21.36%)</title><rect x="74.8106%" y="1429" width="21.3636%" height="15" fill="rgb(224,227,45)" fg:x="1975" fg:w="564"/><text x="75.0606%" y="1439.50">_start</text></g><g><title>_dl_start (4 samples, 0.15%)</title><rect x="96.0227%" y="1413" width="0.1515%" height="15" fill="rgb(229,198,43)" fg:x="2535" fg:w="4"/><text x="96.2727%" y="1423.50"></text></g><g><title>_dl_sysdep_start (4 samples, 0.15%)</title><rect x="96.0227%" y="1397" width="0.1515%" height="15" fill="rgb(206,209,35)" fg:x="2535" fg:w="4"/><text x="96.2727%" y="1407.50"></text></g><g><title>dl_main (4 samples, 0.15%)</title><rect x="96.0227%" y="1381" width="0.1515%" height="15" fill="rgb(245,195,53)" fg:x="2535" fg:w="4"/><text x="96.2727%" y="1391.50"></text></g><g><title>_dl_relocate_object (4 samples, 0.15%)</title><rect x="96.0227%" y="1365" width="0.1515%" height="15" fill="rgb(240,92,26)" fg:x="2535" fg:w="4"/><text x="96.2727%" y="1375.50"></text></g><g><title>_dl_lookup_symbol_x (3 samples, 0.11%)</title><rect x="96.0606%" y="1349" width="0.1136%" height="15" fill="rgb(207,40,23)" fg:x="2536" fg:w="3"/><text x="96.3106%" y="1359.50"></text></g><g><title>do_lookup_x (3 samples, 0.11%)</title><rect x="96.0606%" y="1333" width="0.1136%" height="15" fill="rgb(223,111,35)" fg:x="2536" fg:w="3"/><text x="96.3106%" y="1343.50"></text></g><g><title>check_match (1 samples, 0.04%)</title><rect x="96.1364%" y="1317" width="0.0379%" height="15" fill="rgb(229,147,28)" fg:x="2538" fg:w="1"/><text x="96.3864%" y="1327.50"></text></g><g><title>strcmp (1 samples, 0.04%)</title><rect x="96.1364%" y="1301" width="0.0379%" height="15" fill="rgb(211,29,28)" fg:x="2538" fg:w="1"/><text x="96.3864%" y="1311.50"></text></g><g><title>cfree@GLIBC_2.2.5 (15 samples, 0.57%)</title><rect x="96.1742%" y="1429" width="0.5682%" height="15" fill="rgb(228,72,33)" fg:x="2539" fg:w="15"/><text x="96.4242%" y="1439.50"></text></g><g><title>malloc (15 samples, 0.57%)</title><rect x="96.7424%" y="1429" width="0.5682%" height="15" fill="rgb(205,214,31)" fg:x="2554" fg:w="15"/><text x="96.9924%" y="1439.50"></text></g><g><title>operator new (8 samples, 0.30%)</title><rect x="97.3106%" y="1429" width="0.3030%" height="15" fill="rgb(224,111,15)" fg:x="2569" fg:w="8"/><text x="97.5606%" y="1439.50"></text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_default_append (7 samples, 0.27%)</title><rect x="97.6136%" y="1429" width="0.2652%" height="15" fill="rgb(253,21,26)" fg:x="2577" fg:w="7"/><text x="97.8636%" y="1439.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_allocate (3 samples, 0.11%)</title><rect x="97.7652%" y="1413" width="0.1136%" height="15" fill="rgb(245,139,43)" fg:x="2581" fg:w="3"/><text x="98.0152%" y="1423.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::allocate (3 samples, 0.11%)</title><rect x="97.7652%" y="1397" width="0.1136%" height="15" fill="rgb(252,170,7)" fg:x="2581" fg:w="3"/><text x="98.0152%" y="1407.50"></text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::allocate (3 samples, 0.11%)</title><rect x="97.7652%" y="1381" width="0.1136%" height="15" fill="rgb(231,118,14)" fg:x="2581" fg:w="3"/><text x="98.0152%" y="1391.50"></text></g><g><title>operator new (3 samples, 0.11%)</title><rect x="97.7652%" y="1365" width="0.1136%" height="15" fill="rgb(238,83,0)" fg:x="2581" fg:w="3"/><text x="98.0152%" y="1375.50"></text></g><g><title>malloc (3 samples, 0.11%)</title><rect x="97.7652%" y="1349" width="0.1136%" height="15" fill="rgb(221,39,39)" fg:x="2581" fg:w="3"/><text x="98.0152%" y="1359.50"></text></g><g><title>PROLEAD (2,610 samples, 98.86%)</title><rect x="0.0000%" y="1445" width="98.8636%" height="15" fill="rgb(222,119,46)" fg:x="0" fg:w="2610"/><text x="0.2500%" y="1455.50">PROLEAD</text></g><g><title>std::vector&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::reserve (26 samples, 0.98%)</title><rect x="97.8788%" y="1429" width="0.9848%" height="15" fill="rgb(222,165,49)" fg:x="2584" fg:w="26"/><text x="98.1288%" y="1439.50"></text></g><g><title>std::_Vector_base&lt;std::pair&lt;double, int&gt;, std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::_M_allocate (21 samples, 0.80%)</title><rect x="98.0682%" y="1413" width="0.7955%" height="15" fill="rgb(219,113,52)" fg:x="2589" fg:w="21"/><text x="98.3182%" y="1423.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;double, int&gt; &gt; &gt;::allocate (21 samples, 0.80%)</title><rect x="98.0682%" y="1397" width="0.7955%" height="15" fill="rgb(214,7,15)" fg:x="2589" fg:w="21"/><text x="98.3182%" y="1407.50"></text></g><g><title>std::__new_allocator&lt;std::pair&lt;double, int&gt; &gt;::allocate (21 samples, 0.80%)</title><rect x="98.0682%" y="1381" width="0.7955%" height="15" fill="rgb(235,32,4)" fg:x="2589" fg:w="21"/><text x="98.3182%" y="1391.50"></text></g><g><title>operator new (21 samples, 0.80%)</title><rect x="98.0682%" y="1365" width="0.7955%" height="15" fill="rgb(238,90,54)" fg:x="2589" fg:w="21"/><text x="98.3182%" y="1375.50"></text></g><g><title>malloc (21 samples, 0.80%)</title><rect x="98.0682%" y="1349" width="0.7955%" height="15" fill="rgb(213,208,19)" fg:x="2589" fg:w="21"/><text x="98.3182%" y="1359.50"></text></g><g><title>[anon] (3 samples, 0.11%)</title><rect x="98.8636%" y="1429" width="0.1136%" height="15" fill="rgb(233,156,4)" fg:x="2610" fg:w="3"/><text x="99.1136%" y="1439.50"></text></g><g><title>wait_sigint_handler (3 samples, 0.11%)</title><rect x="98.8636%" y="1413" width="0.1136%" height="15" fill="rgb(207,194,5)" fg:x="2610" fg:w="3"/><text x="99.1136%" y="1423.50"></text></g><g><title>[unknown] (4 samples, 0.15%)</title><rect x="98.9773%" y="1429" width="0.1515%" height="15" fill="rgb(206,111,30)" fg:x="2613" fg:w="4"/><text x="99.2273%" y="1439.50"></text></g><g><title>_dl_start (1 samples, 0.04%)</title><rect x="99.1288%" y="1429" width="0.0379%" height="15" fill="rgb(243,70,54)" fg:x="2617" fg:w="1"/><text x="99.3788%" y="1439.50"></text></g><g><title>expand_word_list_internal (1 samples, 0.04%)</title><rect x="99.2424%" y="1269" width="0.0379%" height="15" fill="rgb(242,28,8)" fg:x="2620" fg:w="1"/><text x="99.4924%" y="1279.50"></text></g><g><title>copy_word_list (1 samples, 0.04%)</title><rect x="99.2424%" y="1253" width="0.0379%" height="15" fill="rgb(219,106,18)" fg:x="2620" fg:w="1"/><text x="99.4924%" y="1263.50"></text></g><g><title>make_word_list (1 samples, 0.04%)</title><rect x="99.2424%" y="1237" width="0.0379%" height="15" fill="rgb(244,222,10)" fg:x="2620" fg:w="1"/><text x="99.4924%" y="1247.50"></text></g><g><title>xmalloc (1 samples, 0.04%)</title><rect x="99.2424%" y="1221" width="0.0379%" height="15" fill="rgb(236,179,52)" fg:x="2620" fg:w="1"/><text x="99.4924%" y="1231.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="99.2424%" y="1205" width="0.0379%" height="15" fill="rgb(213,23,39)" fg:x="2620" fg:w="1"/><text x="99.4924%" y="1215.50"></text></g><g><title>_int_malloc (1 samples, 0.04%)</title><rect x="99.2424%" y="1189" width="0.0379%" height="15" fill="rgb(238,48,10)" fg:x="2620" fg:w="1"/><text x="99.4924%" y="1199.50"></text></g><g><title>__GI___sigprocmask (1 samples, 0.04%)</title><rect x="99.2803%" y="1253" width="0.0379%" height="15" fill="rgb(251,196,23)" fg:x="2621" fg:w="1"/><text x="99.5303%" y="1263.50"></text></g><g><title>make_child (9 samples, 0.34%)</title><rect x="99.2803%" y="1269" width="0.3409%" height="15" fill="rgb(250,152,24)" fg:x="2621" fg:w="9"/><text x="99.5303%" y="1279.50"></text></g><g><title>__libc_fork (8 samples, 0.30%)</title><rect x="99.3182%" y="1253" width="0.3030%" height="15" fill="rgb(209,150,17)" fg:x="2622" fg:w="8"/><text x="99.5682%" y="1263.50"></text></g><g><title>_Fork (8 samples, 0.30%)</title><rect x="99.3182%" y="1237" width="0.3030%" height="15" fill="rgb(234,202,34)" fg:x="2622" fg:w="8"/><text x="99.5682%" y="1247.50"></text></g><g><title>reader_loop (13 samples, 0.49%)</title><rect x="99.2424%" y="1365" width="0.4924%" height="15" fill="rgb(253,148,53)" fg:x="2620" fg:w="13"/><text x="99.4924%" y="1375.50"></text></g><g><title>execute_command (13 samples, 0.49%)</title><rect x="99.2424%" y="1349" width="0.4924%" height="15" fill="rgb(218,129,16)" fg:x="2620" fg:w="13"/><text x="99.4924%" y="1359.50"></text></g><g><title>execute_command_internal (13 samples, 0.49%)</title><rect x="99.2424%" y="1333" width="0.4924%" height="15" fill="rgb(216,85,19)" fg:x="2620" fg:w="13"/><text x="99.4924%" y="1343.50"></text></g><g><title>execute_connection (13 samples, 0.49%)</title><rect x="99.2424%" y="1317" width="0.4924%" height="15" fill="rgb(235,228,7)" fg:x="2620" fg:w="13"/><text x="99.4924%" y="1327.50"></text></g><g><title>execute_pipeline (13 samples, 0.49%)</title><rect x="99.2424%" y="1301" width="0.4924%" height="15" fill="rgb(245,175,0)" fg:x="2620" fg:w="13"/><text x="99.4924%" y="1311.50"></text></g><g><title>execute_command_internal (13 samples, 0.49%)</title><rect x="99.2424%" y="1285" width="0.4924%" height="15" fill="rgb(208,168,36)" fg:x="2620" fg:w="13"/><text x="99.4924%" y="1295.50"></text></g><g><title>wait_for (3 samples, 0.11%)</title><rect x="99.6212%" y="1269" width="0.1136%" height="15" fill="rgb(246,171,24)" fg:x="2630" fg:w="3"/><text x="99.8712%" y="1279.50"></text></g><g><title>waitchld.isra.0 (3 samples, 0.11%)</title><rect x="99.6212%" y="1253" width="0.1136%" height="15" fill="rgb(215,142,24)" fg:x="2630" fg:w="3"/><text x="99.8712%" y="1263.50"></text></g><g><title>__GI___wait4 (3 samples, 0.11%)</title><rect x="99.6212%" y="1237" width="0.1136%" height="15" fill="rgb(250,187,7)" fg:x="2630" fg:w="3"/><text x="99.8712%" y="1247.50"></text></g><g><title>[libc.so.6] (2 samples, 0.08%)</title><rect x="99.6591%" y="1221" width="0.0758%" height="15" fill="rgb(228,66,33)" fg:x="2631" fg:w="2"/><text x="99.9091%" y="1231.50"></text></g><g><title>wait_sigint_handler (2 samples, 0.08%)</title><rect x="99.6591%" y="1205" width="0.0758%" height="15" fill="rgb(234,215,21)" fg:x="2631" fg:w="2"/><text x="99.9091%" y="1215.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (14 samples, 0.53%)</title><rect x="99.2424%" y="1413" width="0.5303%" height="15" fill="rgb(222,191,20)" fg:x="2620" fg:w="14"/><text x="99.4924%" y="1423.50"></text></g><g><title>__libc_start_call_main (14 samples, 0.53%)</title><rect x="99.2424%" y="1397" width="0.5303%" height="15" fill="rgb(245,79,54)" fg:x="2620" fg:w="14"/><text x="99.4924%" y="1407.50"></text></g><g><title>main (14 samples, 0.53%)</title><rect x="99.2424%" y="1381" width="0.5303%" height="15" fill="rgb(240,10,37)" fg:x="2620" fg:w="14"/><text x="99.4924%" y="1391.50"></text></g><g><title>set_default_locale (1 samples, 0.04%)</title><rect x="99.7348%" y="1365" width="0.0379%" height="15" fill="rgb(214,192,32)" fg:x="2633" fg:w="1"/><text x="99.9848%" y="1375.50"></text></g><g><title>mblen (1 samples, 0.04%)</title><rect x="99.7348%" y="1349" width="0.0379%" height="15" fill="rgb(209,36,54)" fg:x="2633" fg:w="1"/><text x="99.9848%" y="1359.50"></text></g><g><title>__wcsmbs_load_conv (1 samples, 0.04%)</title><rect x="99.7348%" y="1333" width="0.0379%" height="15" fill="rgb(220,10,11)" fg:x="2633" fg:w="1"/><text x="99.9848%" y="1343.50"></text></g><g><title>__gconv_find_transform (1 samples, 0.04%)</title><rect x="99.7348%" y="1317" width="0.0379%" height="15" fill="rgb(221,106,17)" fg:x="2633" fg:w="1"/><text x="99.9848%" y="1327.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.04%)</title><rect x="99.7348%" y="1301" width="0.0379%" height="15" fill="rgb(251,142,44)" fg:x="2633" fg:w="1"/><text x="99.9848%" y="1311.50"></text></g><g><title>__gconv_read_conf (1 samples, 0.04%)</title><rect x="99.7348%" y="1285" width="0.0379%" height="15" fill="rgb(238,13,15)" fg:x="2633" fg:w="1"/><text x="99.9848%" y="1295.50"></text></g><g><title>read_conf_file.isra.0 (1 samples, 0.04%)</title><rect x="99.7348%" y="1269" width="0.0379%" height="15" fill="rgb(208,107,27)" fg:x="2633" fg:w="1"/><text x="99.9848%" y="1279.50"></text></g><g><title>sh (25 samples, 0.95%)</title><rect x="98.8636%" y="1445" width="0.9470%" height="15" fill="rgb(205,136,37)" fg:x="2610" fg:w="25"/><text x="99.1136%" y="1455.50"></text></g><g><title>_start (17 samples, 0.64%)</title><rect x="99.1667%" y="1429" width="0.6439%" height="15" fill="rgb(250,205,27)" fg:x="2618" fg:w="17"/><text x="99.4167%" y="1439.50"></text></g><g><title>_dl_start (1 samples, 0.04%)</title><rect x="99.7727%" y="1413" width="0.0379%" height="15" fill="rgb(210,80,43)" fg:x="2634" fg:w="1"/><text x="100.0227%" y="1423.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.04%)</title><rect x="99.7727%" y="1397" width="0.0379%" height="15" fill="rgb(247,160,36)" fg:x="2634" fg:w="1"/><text x="100.0227%" y="1407.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.04%)</title><rect x="99.7727%" y="1381" width="0.0379%" height="15" fill="rgb(234,13,49)" fg:x="2634" fg:w="1"/><text x="100.0227%" y="1391.50"></text></g><g><title>update_active.constprop.0 (1 samples, 0.04%)</title><rect x="99.7727%" y="1365" width="0.0379%" height="15" fill="rgb(234,122,0)" fg:x="2634" fg:w="1"/><text x="100.0227%" y="1375.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.04%)</title><rect x="99.8106%" y="1429" width="0.0379%" height="15" fill="rgb(207,146,38)" fg:x="2635" fg:w="1"/><text x="100.0606%" y="1439.50"></text></g><g><title>main (1 samples, 0.04%)</title><rect x="99.8106%" y="1413" width="0.0379%" height="15" fill="rgb(207,177,25)" fg:x="2635" fg:w="1"/><text x="100.0606%" y="1423.50"></text></g><g><title>launch_program (1 samples, 0.04%)</title><rect x="99.8106%" y="1397" width="0.0379%" height="15" fill="rgb(211,178,42)" fg:x="2635" fg:w="1"/><text x="100.0606%" y="1407.50"></text></g><g><title>single_binary_main_tee (1 samples, 0.04%)</title><rect x="99.8106%" y="1381" width="0.0379%" height="15" fill="rgb(230,69,54)" fg:x="2635" fg:w="1"/><text x="100.0606%" y="1391.50"></text></g><g><title>tee_files (1 samples, 0.04%)</title><rect x="99.8106%" y="1365" width="0.0379%" height="15" fill="rgb(214,135,41)" fg:x="2635" fg:w="1"/><text x="100.0606%" y="1375.50"></text></g><g><title>all (2,640 samples, 100%)</title><rect x="0.0000%" y="1461" width="100.0000%" height="15" fill="rgb(237,67,25)" fg:x="0" fg:w="2640"/><text x="0.2500%" y="1471.50"></text></g><g><title>tee (5 samples, 0.19%)</title><rect x="99.8106%" y="1445" width="0.1894%" height="15" fill="rgb(222,189,50)" fg:x="2635" fg:w="5"/><text x="100.0606%" y="1455.50"></text></g><g><title>read (4 samples, 0.15%)</title><rect x="99.8485%" y="1429" width="0.1515%" height="15" fill="rgb(245,148,34)" fg:x="2636" fg:w="4"/><text x="100.0985%" y="1439.50"></text></g></svg></svg>